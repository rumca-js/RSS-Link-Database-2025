[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-20T21:06:54.402997+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-20T20:23:23+00:00",
        "description": "<p>\n\t<img alt=\"indent-steffen.png\" src=\"https://isocpp.org/files/img/indent-steffen.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=gybQtWGvupM\">Lightning Talk: How Far Should You Indent Your Code? - The Number Of The Counting</a></h3>\n\t<p>\n\t\tby Dave Steffen</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tCoding Standards have to say something about how we indent our code.&nbsp; Is t",
        "id": 2982176,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/cppcon-2024-how-far-should-you-indent-your-code-the-number-of-the-counting",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/indent-steffen.png",
        "title": "CppCon 2024 How Far Should You Indent Your Code? - The Number Of The Counting -- Dave Steffen",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-20T00:28:24.135670+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-20T00:14:43+00:00",
        "description": "<p>\n\t<img alt=\"image-33-825x510.jpg\" src=\"https://isocpp.org/files/img/image-33-825x510.jpg\" style=\"width: 300px; margin: 10px; float: right; height: 300px;\" />Templates are one of C++&rsquo;s most powerful features, enabling developers to write generic, reusable code&mdash;but they come with a cost: notoriously verbose and opaque error messages. With the introduction of concepts in C++20, we can now impose clear constraints on template parameters and get far more helpful diagnostics when something goes wrong.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://lemire.me/blog/2025/05/03/c20-concepts-for-nicer-compiler-errors/\">C++20 Concepts for Nicer Compiler Errors</a></h3>\n\t<p>\n\t\tby Daniel Lemire</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tIn C++, templates enable generic programming by allowing functions and classes to operate on different data types without sacrificing type safety. Defined using the template keyword, they let developers write reusable, type-agnostic co",
        "id": 2974732,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/cpp20-concepts-for-nicer-compiler-errors-daniel-lemire",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/image-33-825x510.jpg",
        "title": "C++20 Concepts for Nicer Compiler Errors -- Daniel Lemire",
        "vote": 0
    }
]