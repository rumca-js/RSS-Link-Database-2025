[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-14T21:24:36.353838+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-14T20:12:39+00:00",
        "description": "<p>\n\t<img alt=\"pmr-dixon.png\" src=\"https://isocpp.org/files/img/pmr-dixon.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=YZ88s9aZBqw\">Lightning Talk: Using PMR in C++ Embedded Systems for Functional Safety</a></h3>\n\t<p>\n\t\tby Scott Dixon</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tDynamic memory is often disallowed in high-assurance, c++ embedded systems but, when examining the r",
        "id": 2933219,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/cppcon-2024-using-pmr-in-cpp-embedded-systems-for-functional-safety-scott-d",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/pmr-dixon.png",
        "title": "CppCon 2024 Using PMR in C++ Embedded Systems for Functional Safety -- Scott Dixon",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-14T00:48:47.445230+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-14T00:08:18+00:00",
        "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />Here are the standard library features that will soon be usable at compile time. One topic is missing: exceptions. As they need both core language and library changes, I thought they deserved their own post.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2025/04/30/cpp26-constexpr-library-changes\">C++26: More constexpr in the Standard Library</a></h3>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p id=\"p2562r1-constexpr-stable-sorting\">\n\t\t<strong><a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2562r1.pdf\">P2562R1</a>:&nbsp;<code>constexpr</code>&nbsp;stable sorting</strong></p>\n\t<p>\n\t\tThis paper proposes making&nbsp;<code>std::stable_sort</code>,&nbsp;<code>std::stable_partition</code>,&nbsp;<code>std::inplace_merge</code>, and their&nbsp;<code>rang",
        "id": 2928074,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/cpp26-more-constexpr-in-the-standard-library-sandor-dargo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG",
        "title": "C++26: More constexpr in the Standard Library -- Sandor Dargo",
        "vote": 0
    }
]