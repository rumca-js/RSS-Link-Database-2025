[
    {
        "age": null,
        "album": "",
        "author": "/u/Separate-Choice",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-22T21:23:24.077259+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-22T21:02:11+00:00",
        "description": "<table> <tr><td> <a href=\"https://www.reddit.com/r/RISCV/comments/1lhykji/chips_i_recommend_moving_from_stm32_to_being_a/\"> <img src=\"https://external-preview.redd.it/hINW3c3m5OyBFk7xVyRNjIfdX6mLHUWEYRBua0bYEr0.jpeg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5ddb8d37628144550b0347efc205c40e627d13d4\" alt=\"Chips I recommend moving from STM32 to being a RISC-V Shop!\" title=\"Chips I recommend moving from STM32 to being a RISC-V Shop!\" /> </a> </td><td> <!-- SC_OFF --><div class=\"md\"><p>I&#39;ve been experimenting with popular RISC-V chips...if you&#39;re doing more pro level stuff..CH32 wins over ESP32 or Pico 2....yes I know the wireless use case bit most stuff don&#39;t need wireless..ESP32C3 mini makes a great wireless slave device...</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Separate-Choice\"> /u/Separate-Choice </a> <br/> <span><a href=\"https://youtu.be/dAyygPmpspc?si=bn_VvGzdb8tKwKIk\">[link]</a></span> &#32; <span><a href=\"https://www.re",
        "id": 2993604,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1lhykji/chips_i_recommend_moving_from_stm32_to_being_a",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://external-preview.redd.it/hINW3c3m5OyBFk7xVyRNjIfdX6mLHUWEYRBua0bYEr0.jpeg?width=320&crop=smart&auto=webp&s=5ddb8d37628144550b0347efc205c40e627d13d4",
        "title": "Chips I recommend moving from STM32 to being a RISC-V Shop!",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Quiet-Arm-641",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-22T05:30:48.054407+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-22T05:16:24+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m used to the instructions I specify being the instructions that end up in the object file. RISC-V allows the assembler a lot of freedom around doing things like materializing constants. I&#39;m not sure why clang 18 is replacing the addi with a c.mv. I mean it clearly can, and it saves two bytes, but it could also just remove the instruction entirely and save 4 bytes.</p> <p>Interestingly, clang 21 keeps the addi like gcc does.</p> <pre><code>ubuntu@em-flamboyant-bhaskara:~/src/rvsoftfloat/src$ cat foo.s .text .globl _start _start: lui a2, %hi(0x81000000) addi a2, a2, %lo(0x81000000) ubuntu@em-flamboyant-bhaskara:~/src/rvsoftfloat/src$ clang --target=riscv64 -march=rv64gc -mabi=lp64 -c foo.s ubuntu@em-flamboyant-bhaskara:~/src/rvsoftfloat/src$ llvm-objdump -M no-aliases -r -d foo.o foo.o: file format elf64-littleriscv Disassembly of section .text: 0000000000000000 &lt;_start&gt;: 0: 37 06 00 81 lui a2, 0x81000 4: 32 86 c.mv a2, a2 ubuntu@em-fla",
        "id": 2990013,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1lhg415/riscv_assembly_is_basically_just_a_hint_as_to",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "RISC-V assembly is basically just a hint as to what machine code to generate",
        "vote": 0
    }
]