[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-06T20:43:51.309320+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-06T20:01:00+00:00",
        "description": "<p>\n\t<img alt=\"abstractions-juhasz.png\" src=\"https://isocpp.org/files/img/abstractions-juhasz.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=7gz98K_hCEM\">Cost of C++ Abstractions in C++ Embedded Systems</a></h3>\n\t<p>\n\t\tby Marcell Juhasz</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tThis session will feature detailed case studies that measure the overhead associated with common pro",
        "id": 2868888,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/cppcon-2024-cost-of-cpp-abstractions-in-c-embedded-systems-marcell-juhasz",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/abstractions-juhasz.png",
        "title": "CppCon 2024 Cost of C++ Abstractions in C++ Embedded Systems -- Marcell Juhasz",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-06T01:15:00.829586+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-06T00:02:04+00:00",
        "description": "<p>\n\t<img alt=\"howtojoinconcat-filipek.png\" src=\"https://isocpp.org/files/img/howtojoinconcat-filipek.png\" style=\"width: 400px; margin: 10px; float: right;\" />C++ continues to refine its range library, offering developers more efficient and expressive ways to manipulate collections. In this post, we&#39;ll dive into three powerful range adaptors&mdash;<code data-end=\"198\" data-start=\"185\">concat_view</code>, <code data-end=\"211\" data-start=\"200\">join_view</code>, and <code data-end=\"233\" data-start=\"217\">join_with_view</code>&mdash;exploring their differences, use cases, and practical examples.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.cppstories.com/2025/join_concat_ranges/\">How to Join or Concat Ranges, C++26</a></h3>\n\t<p>\n\t\tby Bartlomiej Filipek</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tModern C++ continuously improves its range library to provide more expressive, flexible, and efficient ways to manipulate collections. Traditionally, achieving tasks like ",
        "id": 2861576,
        "language": null,
        "link": "https://isocpp.org//blog/2025/06/how-to-join-or-concat-ranges-cpp26-bartlomiej-filipek",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/howtojoinconcat-filipek.png",
        "title": "How to Join or Concat Ranges, C++26 -- Bartlomiej Filipek",
        "vote": 0
    }
]