[
    {
        "age": null,
        "album": "",
        "author": "/u/crayola96pack",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-11T23:06:03.747941+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-11T23:00:54+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/crayola96pack\"> /u/crayola96pack </a> <br/> <span><a href=\"https://www.youtube.com/watch?v=F_bXAqZG9Nc\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/ReverseEngineering/comments/1l96xhg/we_need_your_help_modding_nfl_street_2/\">[comments]</a></span>",
        "id": 2909345,
        "language": null,
        "link": "https://www.reddit.com/r/ReverseEngineering/comments/1l96xhg/we_need_your_help_modding_nfl_street_2",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 476,
        "source_url": "https://www.reddit.com/r/ReverseEngineering/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "We Need Your Help Modding NFL Street 2!",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Binary_Lynx",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-11T22:02:00.629622+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-11T21:20:13+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey everyone! </p> <p>During my recent reverse engineering sessions, I found myself needing a quick and convenient way to convert assembly code to opcodes and vice versa. While great libraries like <strong>Capstone</strong> and <strong>Keystone</strong> exist (and even have JavaScript bindings), I couldn\u2019t find a lightweight <em>online</em> tool that made this workflow smooth and fast - especially one that made copying the generated opcodes easy (there are official demos of Capstone.js and Keystone.js yet I found them to be little bit buggy).</p> <p>So, I decided to build one!</p> <p><strong>What it does:</strong></p> <ul> <li>Converts <strong>assembly \u2194 opcodes</strong> using Keystone.js and Capstone.js.</li> <li>Supports popular architectures: <strong>x86</strong>, <strong>ARM, ARM64</strong>, <strong>MIPS</strong>, <strong>SPARC</strong>, and more.</li> <li>Includes a built-in emulator using <strong>Unicorn.js</strong> to trace register states afte",
        "id": 2908921,
        "language": null,
        "link": "https://www.reddit.com/r/ReverseEngineering/comments/1l94jhi/online_tool_for_assembly_opcode_conversion",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 476,
        "source_url": "https://www.reddit.com/r/ReverseEngineering/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Online Tool for Assembly \u2194 Opcode Conversion + Emulation",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/truedreamer1",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-11T20:57:10.502743+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-11T20:49:57+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Dr.Binary can run scripts now and invoke more tools. With this new capability, dr.binary can now solve a CTF challenge in just one shot! Without this capability, it needs the feedback from users to finish this task.</p> <p>Nothing is impossible! very impressive!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/truedreamer1\"> /u/truedreamer1 </a> <br/> <span><a href=\"https://drbinary.ai/chat/afa92214-6d1f-4292-a7fb-a0740a1fcad3\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/ReverseEngineering/comments/1l93seb/what_will_happen_if_llm_can_execute_scripts_and/\">[comments]</a></span>",
        "id": 2908522,
        "language": null,
        "link": "https://www.reddit.com/r/ReverseEngineering/comments/1l93seb/what_will_happen_if_llm_can_execute_scripts_and",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 476,
        "source_url": "https://www.reddit.com/r/ReverseEngineering/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "What will happen if LLM can execute scripts and invoke more tools in a sandbox?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/igor_sk",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-11T19:51:59.045780+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-11T19:18:43+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/igor_sk\"> /u/igor_sk </a> <br/> <span><a href=\"https://icanhack.nl/blog/rh850-glitch/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/ReverseEngineering/comments/1l91im4/bypassing_the_renesas_rh850p1me_read_protection/\">[comments]</a></span>",
        "id": 2907953,
        "language": null,
        "link": "https://www.reddit.com/r/ReverseEngineering/comments/1l91im4/bypassing_the_renesas_rh850p1me_read_protection",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 476,
        "source_url": "https://www.reddit.com/r/ReverseEngineering/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Bypassing the Renesas RH850/P1M-E read protection using fault injection",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/tnavda",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-06-11T03:21:45.317230+00:00",
        "date_dead_since": null,
        "date_published": "2025-06-11T02:48:56+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/tnavda\"> /u/tnavda </a> <br/> <span><a href=\"https://www.binarly.io/blog/another-crack-in-the-chain-of-trust\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/ReverseEngineering/comments/1l8htw6/another_crack_in_the_chain_of_trust_uncovering/\">[comments]</a></span>",
        "id": 2900916,
        "language": null,
        "link": "https://www.reddit.com/r/ReverseEngineering/comments/1l8htw6/another_crack_in_the_chain_of_trust_uncovering",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 476,
        "source_url": "https://www.reddit.com/r/ReverseEngineering/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Another Crack in the Chain of Trust: Uncovering (Yet Another) Secure Boot Bypass",
        "vote": 0
    }
]