[
    {
        "age": null,
        "album": "",
        "author": "/u/PepperOld5727",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T21:58:31.872921+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T21:39:59+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello,</p> <p>I&#39;m working on a project using react and django, it&#39;s a website for an academy, I need to add publications page where I put all publications by their instructors, they sent me the academic publications pdf files and I took a look at them and felt kinda lost, I don&#39;t know how should I store them not all of them have the same structure/layout, and some of them contain tables ,charts, many numbers and formulas, I&#39;m not really familiar with publication papers so they look intimidating lol, I thought about hardcoding them page by page into react but Ik it&#39;s not best practice, have someone here worked with something similar before? any advice?</p> <p>plus: I&#39;d appreciate also if anyone can share links to some good websites that posts publications or something similar so I can get inspirations.</p> <p>thanks in advance!</p> <p>edit: typo</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/us",
        "id": 2758099,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktvd8l/confused_about_storing_articles_in_database",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Confused about storing articles in database",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Roddela",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T21:58:32.039576+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T21:02:14+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;ve been becoming very good at Django for the past years and I love it, when it comes for job seeking I just can&#39;t find good opportunities on this framework. I&#39;m currently looking for reasons to stick with it or move on and currently doing a pro/cons against modern stack. Here&#39;s what I&#39;ve considered:</p> <p>Pro - Direct integration for ETL - Django extensions (jupyter Notebooks) - Direct AI integrations (APIs or models directly into the python stack) - Works excellent with Postgres - Authentication, Groups and permissions - Security</p> <p>Cons - Not many job opportunities - Hard to find Redis DB - Scales horizontally </p> <p>Do you guys have any other? What are your thoughts on this?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Roddela\"> /u/Roddela </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1ktuhoe/looking_for_reasons_for_sticking_with_django/\">[link]</a></span> &#",
        "id": 2758100,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktuhoe/looking_for_reasons_for_sticking_with_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Looking for reasons for sticking with Django rather than using more modern tech stacks",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/nabaci",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T15:18:56.141382+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T14:57:11+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello guys,</p> <p>I&#39;m writing a project that uses inline and model formsets heavily (6 formsets in total). I wrote a simple repository to ask my question, this is not my orijinal project. In this code, do I need to wrap this section with `@atomic` ? <a href=\"https://github.com/skenci/nested_formset_project/blob/main/demoapp/views.py#L50-L89\">https://github.com/skenci/nested_formset_project/blob/main/demoapp/views.py#L50-L89</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/nabaci\"> /u/nabaci </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1ktlnbi/using_atomic_on_saving_multiple_forms/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1ktlnbi/using_atomic_on_saving_multiple_forms/\">[comments]</a></span>",
        "id": 2754863,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktlnbi/using_atomic_on_saving_multiple_forms",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Using @atomic on saving multiple forms",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/ProtosDev",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T10:58:55.465423+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T10:07:18+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi everyone,</p> <p>I&#39;m currently working on a project where I need to implement Single Sign-On (SSO) across multiple Django applications. The goal is for users to be able to log in once and access all the apps seamlessly.</p> <p>Here\u2019s a bit more context:</p> <ul> <li>I have multiple Django apps (different domains or subdomains).</li> <li>I want to use OAuth2 or OpenID Connect for the authentication flow.</li> <li>Ideally, one app will act as the SSO provider (Authorization Server), and the others will be clients.</li> <li>LDAP integration on the provider side would be a bonus (but not mandatory at this stage).</li> <li>I&#39;m considering using Django OAuth Toolkit or mozilla-django-oidc, but I&#39;m not sure which is more suitable for this setup.</li> </ul> <p>Has anyone here successfully implemented something similar?<br/> Any advice on architecture, libraries, pitfalls to avoid, or example projects would be greatly appreciated!</p> <p>Thanks ",
        "id": 2752682,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktfttm/how_to_implement_sso_across_multiple_django_apps",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to Implement SSO Across Multiple Django Apps?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/irfan_zainudin",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T08:48:57.598554+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T07:43:58+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello good people of Django-land!</p> <p>I built a site with some friends where people can share good deals. We decided to cater for several countries and the templates are getting more and more unmanageable.</p> <p>I was wondering if there is a better way to manage the templates?</p> <p>NOTE: I&#39;m not trying to go for i18n in this problem. I&#39;m aware Django has support for i18n. As you can see below, most of the countries we&#39;re trying to cater are English-speaking.</p> <p>I&#39;m trying to show different homepages for users in different countries. So if you login at <a href=\"http://deals-project.com/us/login\">deals-project.com/us/login</a> then you&#39;ll be served with <a href=\"http://deals-project.com/us/\">deals-project.com/us/</a> which only has links to other /us/ pages. We considered using subdomains like <a href=\"http://us.deals-project.com\">us.deals-project.com</a> but since we&#39;re a small team, managing that will be chaos.</p> <p",
        "id": 2751914,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktdtcv/help_with_structuring_django_templates_for",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Help with structuring Django templates for different countries",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Unlikely_Base5907",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T07:43:54.040597+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T07:05:53+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have lots of preiodic tasks for quite some apps and the list is getting bigger and its hard to track. Do you guys have any suggestion on how to organize it? Do you use any custom UI templates or built your own to manage it? Ideally I wanted something like this </p> <p>``` app1 (collaspsable) - task_1 - task_2 </p> <p>app2 (collaspsable) - task_1 - task_2 </p> <p>```</p> <p>Ie its easier to manage and view. Any suggestions are welcome and thanks </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Unlikely_Base5907\"> /u/Unlikely_Base5907 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1ktd9xo/better_way_to_manage_large_list_of_periodic_tasks/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1ktd9xo/better_way_to_manage_large_list_of_periodic_tasks/\">[comments]</a></span>",
        "id": 2751593,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktd9xo/better_way_to_manage_large_list_of_periodic_tasks",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Better way to manage large list of periodic tasks on Django admin?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Mr___Ashish",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T05:33:53.887256+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T04:52:26+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey folks \ud83d\udc4b</p> <p>Just wanted to share a quick experience from a recent project where I deployed a Django app to an AWS EC2 instance and got Celery + Celery Beat running in the background using <code>systemd</code>.</p> <p>The goal? Have background jobs like email sending, PDF generation, and scheduled tasks run <strong>even when I&#39;m not online \u2014 or even awake</strong>. \ud83c\udf19</p> <h1>\ud83d\udee0\ufe0f What I used:</h1> <ul> <li>Django (with Celery already working locally)</li> <li>AWS EC2 (Ubuntu)</li> <li>Celery &amp; Celery Beat as <code>systemd</code> services (auto-restart, background-safe)</li> <li>Flower for monitoring</li> <li>Gunicorn + Nginx for serving the app</li> </ul> <p>It feels great knowing my app is quietly working behind the scenes \u2014 retrying failed jobs, syncing tasks, and more \u2014 with minimal manual intervention.</p> <p>If anyone\u2019s interested, I wrote a step-by-step blog post explaining how I set it all up, including sample service files:</p> <p>",
        "id": 2751029,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ktb8wc/how_i_made_my_django_app_run_background_tasks",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How I Made My Django App Run Background Tasks While I Sleep (Celery + EC2 Setup)",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/_morphology_",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-23T01:13:54.409515+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-23T00:48:37+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m fascinated by the different attitudes and opinions of the Python/Django community vs the Golang community. In ready many of the posts and comments on reddit (for both communities) I find that one strong difference stands out: </p> <p>In Python/Django there&#39;s an acceptance of &#39;batteries included&#39;, the idea that you can use libraries and packages developed by others in your code. In Golang there&#39;s a large adherence to the idea of not depending upon external libraries or packages. Build it yourself from scratch, don&#39;t use frameworks etc. I&#39;m curious to understand what people think of this difference?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/_morphology_\"> /u/_morphology_ </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1kt6rux/pythondjango_vs_golang_web_development/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kt6rux/python",
        "id": 2750071,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kt6rux/pythondjango_vs_golang_web_development",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Python/Django vs Golang web development",
        "vote": 0
    }
]