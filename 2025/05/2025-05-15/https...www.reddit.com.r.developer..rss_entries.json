[
    {
        "age": null,
        "album": "",
        "author": "/u/elizObserves",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-15T16:02:44.522987+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-15T15:36:31+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>If you\u2019re using a managed observability vendor and not self-hosting, rising ingestion and storage costs can quickly become a major issue, specially as your telemetry volume grows.</p> <p>Here are a few approaches I\u2019ve implemented to reduce telemetry noise and control costs in OpenTelemetry pipelines:</p> <ul> <li><strong>Filtering health check traffic:</strong> Drop spans and logs from periodic <code>/health</code> or <code>/ready</code> endpoints using the OTel Collector <code>filterprocessor</code>.</li> <li><strong>Trace sampling:</strong> Apply tail-based or probabilistic sampling to reduce high-volume, low-signal traces (e.g., homepage GET requests) while retaining statistically meaningful coverage.</li> <li><strong>Log severity filtering:</strong> Drop low-severity (<code>DEBUG</code>) logs in production pipelines, keeping only <code>INFO</code> and above.</li> <li><strong>Vendor ingest controls:</strong> Use backend features like SigNoz Ingest ",
        "id": 2687861,
        "language": null,
        "link": "https://www.reddit.com/r/developer/comments/1knb9z9/optimising_opentelemetry_pipelines_to_cut",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 508,
        "source_url": "https://www.reddit.com/r/developer/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Optimising OpenTelemetry pipelines to cut observability vendor costs with filtering, sampling etc",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/javaFactory",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-15T17:06:44.681976+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-15T14:47:15+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I recently developed a plugin that automates tasks using LLMs.<br/> I&#39;d like to share some thoughts and insights I had while building it.</p> <p>---</p> <p><strong>if there&#39;s a pattern, it&#39;s worth attempting automation with llm. It may sound clich\u00e9, but a lot of work is becoming hands-free.</strong></p> <p>this video shows an example of automatic code generation.I don\u2019t have deep expertise in LLMs. Still, just by \u201cdefining patterns,\u201d \u201cestablishing collection rules,\u201d and \u201cpassing it to the LLM,\u201d I\u2019ve seen clear value.Within a limited scope, it generates 200\u2013300 lines of code in about 30 seconds. After a one-minute review, I can commit it \u2014 it&#39;s quite convenient.</p> <p>If experts were to formalize this approach, it could automate a large portion of what is currently done by hand. I genuinely think this is a highly promising field. (want to join if possible)</p> <p>Rather than focusing on abstract reasoning, I think building practical bu",
        "id": 2688448,
        "language": null,
        "link": "https://www.reddit.com/r/developer/comments/1kna20i/building_an_intellij_code_generation_plugin_with",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 508,
        "source_url": "https://www.reddit.com/r/developer/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Building an IntelliJ Code Generation Plugin with LLM",
        "vote": 0
    }
]