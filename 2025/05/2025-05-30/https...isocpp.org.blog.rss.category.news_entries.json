[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-30T20:24:54.618774+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-30T19:46:21+00:00",
        "description": "<p>\n\t<img alt=\"strategies-durie.png\" src=\"https://isocpp.org/files/img/strategies-durie.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=VJ6HrRtrbr8\">Lightning Talk: Strategies for Developing Safety-Critical Software in C++</a></h3>\n\t<p>\n\t\tby Emily Durie-Johnson</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tThis talk delves into the importance of a safety-first mindset in software d",
        "id": 2811108,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/cppcon-2024-strategies-for-developing-safety-critical-software-in-cpp-emily",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "CppCon 2024 Strategies for Developing Safety-Critical Software in C++ -- Emily Durie-Johnson",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-30T00:11:57.195084+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-30T00:01:52+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />When trying to specialize a templated function for specific types, it&rsquo;s easy to fall into subtle traps around how parameter types are matched. A colleague recently ran into this issue while attempting to specialize a function for a <code data-end=\"240\" data-start=\"232\">Widget</code> and a string literal, only to be met with confusing compiler errors that hinted at deeper quirks in C++&#39;s type deduction and function template specialization rules.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20250410-00/?p=111063\">Function overloading is more flexible (and more convenient) than template function specialization </a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tA colleague of mine was having trouble specializing a templated function. Here&rsquo;",
        "id": 2803468,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/function-overloading-is-more-flexible-than-template-function-specialization",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Function overloading is more flexible than template function specialization -- Raymond Chen",
        "vote": 0
    }
]