[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-28T20:05:51.682730+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-28T19:42:51+00:00",
        "description": "<p>\n\t<img alt=\"internalclass-ryan.png\" src=\"https://isocpp.org/files/img/internalclass-ryan.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=gWinNE5rd6Q\">C++ Under the Hood: Internal Class Mechanisms</a></h3>\n\t<p>\n\t\tby Chris Ryan</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tMy talk will examine the internal C++ mechanisms around the topics of:</p>\n\t<ul>\n\t\t<li>\n\t\t\tThe C++ onion as i",
        "id": 2792782,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/cppcon-2024-cpp-under-the-hood-internal-class-mechanisms-chris-ryan",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "CppCon 2024 C++ Under the Hood: Internal Class Mechanisms -- Chris Ryan",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-28T00:27:13.697465+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-28T00:01:22+00:00",
        "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />In this article, we review how&nbsp;<code>constexpr</code>&nbsp;evolves in the C++26 core language. We are getting&nbsp;<code>constexpr</code>&nbsp;cast from&nbsp;<code>void*</code>, placement&nbsp;<code>new</code>, structured bindings and even exceptions (not discussed today).&nbsp;</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2025/04/23/cpp26-constexpr-language-changes\">C++26: More constexpr in the Core Language</a></h3>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tSince&nbsp;<code>constexpr</code>&nbsp;was added to the language in C++11, its scope has been gradually expanded. In the beginning, we couldn&rsquo;t even use&nbsp;<code>if</code>,&nbsp;<code>else</code>&nbsp;or loops, which were changed in C++14. C++17 added support for&nbsp;<code>constexpr</code",
        "id": 2785046,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/cpp26-more-constexpr-in-the-core-language-sandor-dargo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "C++26: More constexpr in the Core Language -- Sandor Dargo",
        "vote": 0
    }
]