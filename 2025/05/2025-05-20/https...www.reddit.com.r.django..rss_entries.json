[
    {
        "age": null,
        "album": "",
        "author": "/u/sagarp",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T23:56:40.592034+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T23:43:54+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m using Django in a non-Django project purely to make my unit tests easier. I&#39;ve defined all my models like this:</p> <pre><code>class Bar(models.Model): internal_type = models.TextField(...) ... class Meta: managed = False db_table = &#39;myschema\\&quot;.\\&quot;bar&#39; class Foo(models.Model): ... bar = models.ForeignKey(&#39;Bar&#39;, models.DO_NOTHING, db_column=&#39;bar&#39;, blank=True, null=True) class Meta: managed = False db_table = &#39;myschema\\&quot;.\\&quot;foo&#39; </code></pre> <p>This looks funky, but it was working perfectly fine on Django 3.2. It allowed me to write tests like this:</p> <pre><code>def test_foo(self): from app import models assert models.Foo.objects.count() == 0 # self.cursor is a psycopg2 cursor # run_planner uses that cursor to create a bunch of Foo and related Bar objects run_planner(self.cursor) self.cursor.connection.commit() my_foos = models.Foo.objects.filter(bar__internal_type=&#39;special&#39;) asser",
        "id": 2730652,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1krjrck/updated_from_3x_to_52_now_im_getting_obj_matching",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Updated from 3.x to 5.2, now I'm getting \"Obj matching query does not exist\"",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/iaminspiredev",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T19:36:36.825742+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T18:52:02+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have this imbalance.... Mind Tired but Body want to some tiredness And that&#39;s why I can&#39;t sleep.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/iaminspiredev\"> /u/iaminspiredev </a> <br/> <span><a href=\"https://i.redd.it/yb5qr2czgz1f1.jpeg\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1krcwp7/coders_biggest_problem/\">[comments]</a></span>",
        "id": 2728847,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1krcwp7/coders_biggest_problem",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Coders Biggest Problem",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Common_Job846",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T17:26:43.426921+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T17:19:31+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have been building in django since before cursor / co-pilot days. The speed I can now develop and deploy is insane compared to the &quot;old&quot; days. The only area that still feels slow and clunky is writing test scripts. Even when I write really long contexts and attach endless files, the output is pretty crap. What am I missing? All tips and tricks much appreciated</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Common_Job846\"> /u/Common_Job846 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1krajqu/speeding_up_testing_with_cursor/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1krajqu/speeding_up_testing_with_cursor/\">[comments]</a></span>",
        "id": 2727640,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1krajqu/speeding_up_testing_with_cursor",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Speeding up testing with cursor",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Full-Edge4234",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T17:26:43.635026+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T17:02:38+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I need a frontend for my drf project, want to try react, but I&#39;ll have to learn JS, is there any other framework which is easier to learn or I can nitpick on the JS fundamental to work with react? I have no intention of being a full stack dev. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Full-Edge4234\"> /u/Full-Edge4234 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1kra4bx/frontend/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kra4bx/frontend/\">[comments]</a></span>",
        "id": 2727641,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kra4bx/frontend",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Frontend",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/oussama-he",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T13:06:51.877744+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T13:02:19+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I\u2019ve been working on a Django model called <code>ReceivedProduct</code> that handles withdrawing stock from both a <code>Product</code> record and its associated <code>StockBatch</code>es. My goal is to ensure the operation is fully atomic and free from race conditions when multiple users try to withdraw at the same time.</p> <p>Here\u2019s what I have so far:</p> <pre><code>class Product(models.Model): class CountUnit(models.TextChoices): PIECE = &quot;PIECE&quot;, _(&quot;Piece&quot;) KG = &quot;KG&quot;, _(&quot;Kg&quot;) name = models.CharField(_(&quot;name&quot;), max_length=100) count_unit = models.CharField(_(&quot;count unit&quot;), choices=CountUnit.choices, max_length=10, default=CountUnit.PIECE) purchase_price = models.DecimalField(_(&quot;purchase price&quot;), max_digits=6, decimal_places=2) selling_price = models.DecimalField(_(&quot;selling price&quot;), max_digits=6, decimal_places=2) current_stock = models.DecimalField(_(&quot;current stoc",
        "id": 2724974,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kr4b62/seeking_feedback_on_my_models_save_method_is_it",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Seeking feedback on my model\u2019s save() method: is it truly atomic and race-condition-safe?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/ragabekov",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T09:51:45.763644+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T09:13:29+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey everyone, </p> <p>Vlad Mihalcea shared some interesting findings after running the web app under load and analyzing MySQL query performance with Releem.</p> <p>The tool flagged high-latency queries, suggested index changes, helped reduce resource usage and improve query performance.</p> <p>Link if you want to skim: <a href=\"https://vladmihalcea.com/mysql-query-optimization-releem/\">https://vladmihalcea.com/mysql-query-optimization-releem/</a></p> <p>What tools do you use for automatic SQL query optimization in your workflow? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ragabekov\"> /u/ragabekov </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1kr0edj/optimizing_mysql_queries_in_a_django_app/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kr0edj/optimizing_mysql_queries_in_a_django_app/\">[comments]</a></span>",
        "id": 2723460,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kr0edj/optimizing_mysql_queries_in_a_django_app",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Optimizing MySQL queries in a Django app",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Mamejo",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T07:41:35.555739+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T06:44:47+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi everyone,</p> <p>I&#39;m working on a Django project using django-celery-beat for periodic tasks. I&#39;ve customized the admin interface for PeriodicTask by creating a CustomPeriodicTaskAdmin inheriting from django_celery_beat.admin.PeriodicTaskAdmin.</p> <p>Currently, the &quot;Last run at&quot; field only updates when the tasks are executed according to their defined schedule (cron, interval, etc.). I would like this field to also reflect the time when a task is executed manually through the &quot;Run selected tasks&quot; action in the Django admin.</p> <p>I&#39;m exploring the possibility of creating a custom admin action that, in addition to triggering the Celery task, also updates the last_run_at field of the corresponding PeriodicTask object.</p> <p>Has anyone encountered this requirement before or have any insights on how to best approach this? Specifically, I&#39;m looking for guidance on:</p> <ol> <li>How django-celery-beat internally tri",
        "id": 2722827,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kqyc0o/customizing_djangocelerybeat_admin_updating_last",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Customizing django-celery-beat Admin: Updating last_run_at on manual execution",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/InflationTerrible499",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T06:36:32.469713+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T05:42:12+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>We&#39;re developing a copy trading platform. When a trading signal is generated, we want to place the same order on Binance for all users who have subscribed to our platform.</p> <p>Currently, we use Celery to place orders after a signal is created. We loop through all subscribed users and place orders one by one, which is taking time. As our user base grows, this delay increases, and we risk missing the ideal price or market entry point.</p> <p>We want all user orders to be placed <strong>in parallel</strong> (as close to simultaneously as possible). What\u2019s the best way to achieve this using Django and Celery? Is spawning a separate Celery task per user the right way? Or is there a better architecture or setup for this kind of real-time bulk operation?</p> <p>Any advice, patterns, or experience would be appreciated.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/InflationTerrible499\"> /u/InflationTerrible499 <",
        "id": 2722552,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kqxfdr/best_approach_to_place_orders_in_parallel_using",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Best approach to place orders in parallel using Celery for a copy trading platform?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/trojans10",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T03:21:37.462439+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T02:41:27+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>We&#39;re building a <strong>headless API</strong> using Django. Most of our application doesn&#39;t require a CMS \u2014 it&#39;s primarily about managing structured data via the Django admin. However, for <strong>marketing and sales pages</strong>, we need to give non-technical users (like marketers or content creators) the ability to:</p> <ul> <li>Create custom pages for products</li> <li>Move and reorder content blocks (flexible layouts)</li> <li>Duplicate pages or sections</li> <li>Reuse existing structured data like <strong>testimonials, teacher bios, product metadata</strong>, etc.</li> </ul> <p>The idea is:</p> <ol> <li>We create a <strong>Product</strong> in the Django admin, filling out all necessary metadata (e.g. delivery info, pricing, etc.).</li> <li>Then, we want to <strong>create sales/landing pages for that product</strong>, possibly multiple variations, that can <strong>pull in and reuse the structured metadata</strong>.</li> </ol> <h1>Th",
        "id": 2721846,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kqubqw/django_cms_vs_django_wagtail",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django CMS vs Django Wagtail?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Certain-Effect3328",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-20T01:11:37.199506+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-20T00:38:20+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>We\u2019ve been trying out different methods to build structures that allows object B to change its state based on Object A\u2019s state change. Naturally, signal was the go-to. However, it was quickly ruled out as tracing and maintaining became extremely difficult as project grows. It acts too much of a surprise without any hint besides looking specifically at the signals\u2019 files.</p> <p>We later adopted django_lifecycle. It was great at first, but now we realize it kind of breaks the Observer pattern and easily incites circular import. It was great for minimal usage, but with our scenario, it became a hassle to maneuver. ( object A change may cause object B or C change, depending on their FK relation)</p> <p>Currently we\u2019re contemplating on all custom signal. Where signals are always explicitly emitted if expected. Allowing future programmer to be aware of possible signal reactions. </p> <p>I\u2019m curious of different approaches, and what pros and cons did you al",
        "id": 2721354,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kqrwdv/design_for_codependent_reactive_objects",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Design for codependent / reactive objects",
        "vote": 0
    }
]