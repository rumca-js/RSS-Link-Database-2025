[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T22:17:40.923331+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T21:09:27+00:00",
        "description": "<p>\n\t<img alt=\"gccegg-65.png\" src=\"https://isocpp.org/files/img/gccegg-65.png\" style=\"width: 109px; margin: 10px; float: right;\" />GCC 15 is <a href=\"https://gcc.gnu.org/gcc-15/\">now available</a>!</p>\n<p>\n\tHere are some highlights from the release notes&#39; C++ section:</p>\n<ul>\n\t<li>\n\t\tSeveral C++26 features have been implemented:\n\t\t<ul>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://wg21.link/P2558R2\">P2558R2</a>, Add @, $, and ` to the basic character set (<a href=\"https://gcc.gnu.org/PR110343\">PR110343</a>)</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://wg21.link/P2552R3\">P2552R3</a>, On the ignorability of standard attributes (<a href=\"https://gcc.gnu.org/PR110345\">PR110345</a>)</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://wg21.link/P2662R3\">P2662R3</a>, Pack indexing (<a href=\"https://gcc.gnu.org/PR113798\">PR113798</a>)</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://wg21.link/P0609R3\">P0609R3</a>, Attributes for structured bindings (<a href=\"https://gcc.gnu.org/PR114456\">PR114456</a>)</li>\n\t\t\t<li>\n\t\t\t\t<a href=\"https://wg21.link/P2",
        "id": 2578234,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/gcc-15-is-now-available-with-support-for-more-draft-cpp26-features1",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "GCC 15 is now available, with support for more draft C++26 features",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T21:12:44.749349+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T20:49:07+00:00",
        "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />C++ is often seen as an ever-growing language, with each new standard introducing powerful features while maintaining backward compatibility. However, C++26 takes a step toward simplification by officially removing deprecated features, including implicit arithmetic conversions for enumerations and direct comparisons of C-style arrays, both of which previously led to unintended behavior.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2025/03/12/cpp26-removing-language-features\">C++26: Removing Language Features</a></h3>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tProbably you all heard that C++ is an ever-growing language - I wrote so many times as well. Each standard indeed comes with a great bunch of highly-anticipated features. At the same time, due to binary",
        "id": 2577721,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/cpp26-removing-language-features-sandor-dargo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "C++26: Removing Language Features -- Sandor Dargo",
        "vote": 0
    }
]