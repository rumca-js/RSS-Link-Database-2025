[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T21:02:58.533201+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T20:55:57+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m relatively new to Django, and I will admit, I&#39;ve been struggling on how to get this to work a while. Currently, I have left this feature out of the dashboard out till a future version, but it still bugs me.</p> <pre><code>class Palworldplayermetrics( models . Model ): id = models.BigAutoField(primary_key=True) player = models.ForeignKey(&#39;Palworldplayers&#39;, models.DO_NOTHING, related_name=&#39;playerinfo&#39;, blank=True, null=True) palplayermetrictype = models.TextField(blank=True, null=True) # ALWAYS PING data = models.FloatField(blank=True, null=True) insert_time = models.DateTimeField(blank=True, null=True) server = models.ForeignKey(Palwordservers, models.DO_NOTHING, blank=True, null=True) objects = DataFrameManager() class Meta: managed = False db_table = &#39;palworldplayermetrics&#39; app_label = &#39;databot&#39; class Palwordservers( models . Model ): name = models.TextField(blank=True, null=True) ip = models.TextField(blan",
        "id": 2577599,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kcjenx/for_multimodel_fetch_and_pandas_resample",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "For multi-model fetch and pandas resample",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T21:02:58.371905+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T20:37:02+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Good evening guys , I have added new feature to Octopusdash</p> <p>Now you activate <strong>Rich Text Editor (Trix)</strong> for <strong>TextField</strong>&#39;s by simple editing the model admin</p> <p><a href=\"https://preview.redd.it/9dr9ytd3e8ye1.png?width=1920&amp;format=png&amp;auto=webp&amp;s=2f07eda0de32abb05b33bb6d2e9c50197f4143cb\">https://preview.redd.it/9dr9ytd3e8ye1.png?width=1920&amp;format=png&amp;auto=webp&amp;s=2f07eda0de32abb05b33bb6d2e9c50197f4143cb</a></p> <p>Rending the result to test</p> <p><a href=\"https://preview.redd.it/jirbbtx6e8ye1.png?width=1920&amp;format=png&amp;auto=webp&amp;s=b326ee26b6d91652b5b0164425d32fd4f34e9215\">https://preview.redd.it/jirbbtx6e8ye1.png?width=1920&amp;format=png&amp;auto=webp&amp;s=b326ee26b6d91652b5b0164425d32fd4f34e9215</a></p> <p>Here&#39;s how it works ,</p> <p>let say we have a model called <strong>Book</strong> and this model supports rich text editor</p> <p>Each book should have and attachment",
        "id": 2577598,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kciyn4/django_admin_panel_octopusdash_new_feature_image",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django Admin Panel (Octopusdash) New Feature [Image upload and rich text editor]",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T19:56:57.321282+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T19:08:19+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Crazy-Middle-6383\"> /u/Crazy-Middle-6383 </a> <br/> <span><a href=\"https://youtu.be/eLZDs07azto\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kcgvdi/django_crud_operations_tutorial_simple_employee/\">[comments]</a></span>",
        "id": 2577110,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kcgvdi/django_crud_operations_tutorial_simple_employee",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django CRUD Operations Tutorial: Simple Employee Management System",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T18:52:55.589324+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T18:16:26+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Crazy-Middle-6383\"> /u/Crazy-Middle-6383 </a> <br/> <span><a href=\"https://youtu.be/e4QEYDaaoTs?si=s4vB9kGq1i0ECqhq\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kcfmsx/master_django_classbased_views_in_1_hour_cbvs/\">[comments]</a></span>",
        "id": 2576680,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kcfmsx/master_django_classbased_views_in_1_hour_cbvs",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Master Django Class-Based Views in 1 Hour (CBVs Explained Simply)",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T18:52:55.429300+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T17:50:36+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I recently added live-streaming to my Django project would like for folks to check it out. Has live comment updating and everything.</p> <p>Uses: Aws IVS Vastvp video player Vastcomments </p> <p>Once you create an account go to this link and start a livestream:</p> <p><a href=\"https://vastvids.com/live/create_livestream/\">https://vastvids.com/live/create_livestream/</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Radiant-Winner7059\"> /u/Radiant-Winner7059 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1kcf05s/added_live_streaming_on_my_django_project/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1kcf05s/added_live_streaming_on_my_django_project/\">[comments]</a></span>",
        "id": 2576679,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kcf05s/added_live_streaming_on_my_django_project",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Added live streaming on my Django project",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T16:42:59.443224+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T16:13:37+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have a Django model like this:</p> <pre><code>class MachineReading(models.Model): machine = models.ForeignKey(VendingMachine, on_delete=models.CASCADE) worker = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) counter = models.DecimalField(max_digits=12, decimal_places=2) # ... created = models.DateTimeField() </code></pre> <p>I want to ensure there&#39;s only one reading per machine per day, but I don\u2019t want to add a separate DateField just for the date part of the <code>created</code> field. Is there a clean way to enforce this at the database level using Django&#39;s <code>Meta.constraints</code> or any other approach?</p> <p>Thanks!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/oussama-he\"> /u/oussama-he </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1kccn58/how_to_add_a_unique_constraint_on_a_model_using/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.",
        "id": 2575442,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kccn58/how_to_add_a_unique_constraint_on_a_model_using",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to add a unique constraint on a model using only the date part of a DateTimeField?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T08:02:18.455376+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T07:23:56+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><h1>Description</h1> <p>I&#39;m trying to do a DELETE request from my NextJS server-side to my Django server, and I&#39;m running into a 405. I tried digging through the stack trace in the debugger for where was this happening but ended up in an asynchronous loop, so asking here.</p> <p>I have a <a href=\"http://views.py\"><code>views.py</code></a> file which has a class like so</p> <pre><code>class Foo: def get(self, request): # code def post(self, request): # code def put(self, request, id): # code def delete(self, request, id): # code </code></pre> <p>and this is imported in a <a href=\"http://urls.py\"><code>urls.py</code></a> file like so</p> <pre><code>urlpatterns = [ path(&quot;foo/&lt;int:id&gt;/&quot;, Foo.as_view(), name=&quot;foo&quot;) ] </code></pre> <p>I also have this in my <a href=\"http://settings.py\"><code>settings.py</code></a></p> <pre><code>CORS_ALLOW_METHODS = [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;",
        "id": 2571798,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kc2w74/getting_405_method_not_allowed_when_making_delete",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Getting 405 Method Not Allowed when making DELETE request",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-01T06:56:54.716694+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-01T06:13:21+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi there,</p> <p>I just open-sourced a tool I built to make managing <code>.po</code> files in Django much easier.</p> <p>The system pushes your translation strings to a cloud-based UI where you can manage and translate them more easily. When you&#39;re ready, you can pull the updated translations back into your <code>.po</code> files using a simple <a href=\"http://manage.py\"><code>manage.py</code></a> command.</p> <p>Django doesn\u2019t have a great native way to manage <code>.po</code> files, so I created this to fill that gap. The project is still evolving, the API and UI could use some polish, but it\u2019s already usable and might save you time.</p> <ul> <li> Website: <a href=\"https://dj-polyglot.com/\">https://dj-polyglot.com/</a></li> <li> App repo: <a href=\"https://github.com/Thutmose3/dj-polyglot-app\">https://github.com/Thutmose3/dj-polyglot-app</a></li> <li> Library repo: <a href=\"https://github.com/Thutmose3/dj-polyglot-lib\">https://github.com/Thutmos",
        "id": 2571552,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1kc1vyd/i_opensourced_a_po_file_management_system_for",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "I open-sourced a .po file management system for Django \u2013 feedback welcome!",
        "vote": 0
    }
]