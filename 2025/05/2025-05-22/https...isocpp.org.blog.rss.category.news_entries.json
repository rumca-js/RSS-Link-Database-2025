[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-22T20:07:23.618106+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-22T19:27:27+00:00",
        "description": "<p>\n\t<img alt=\"intortouint-dathskovsky.png\" src=\"https://isocpp.org/files/img/intortouint-dathskovsky.png\" style=\"width: 400px; margin: 10px; float: right;\" />Registration is now open for CppCon 2025!&nbsp;The conference starts on September 15 and will be held&nbsp;<a href=\"https://cppcon.org/\">in person in Aurora, CO</a>. To whet your appetite for this year&rsquo;s conference, we&rsquo;re posting videos of some of the top-rated talks from last year&#39;s conference. Here&rsquo;s another CppCon talk video we hope you will enjoy &ndash; and why not&nbsp;<a href=\"https://cppcon.org/registration/\"><strong>register today</strong></a><strong>&nbsp;for CppCon 2025!</strong></p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.youtube.com/watch?v=pnaZ0x9Mmm0\">To Int or to Uint, This is the Question</a></h3>\n\t<p>\n\t\tby Alex Dathskovsky</p>\n</blockquote>\n<p>\n\tSummary of the talk:</p>\n<blockquote>\n\t<p>\n\t\tIn our daily work, we often use integral data types to perform arithmetic calculations, but we may ",
        "id": 2748182,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/cppcon-2024-to-int-or-to-uint-this-is-the-question-alex-dathskovsky",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "CppCon 2024 To Int or to Uint, This is the Question -- Alex Dathskovsky",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Hannes Hauswedell",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-22T17:38:12.666465+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-22T16:40:55+00:00",
        "description": "<p>\n\tThis is the first article in a series discussing some of the underlying properties of C++ ranges and in particular <em>range adaptors</em>. At the same time, I introduce the design of an experimental library which aims to solve some of the problems discussed here.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://hannes.hauswedell.net/post/2025/05/17/non-owning-range/\">Owning and non-owning C++ Ranges</a></h3>\n\t<p>\n\t\tby Hannes Hauswedell</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tWe will begin by having a look at ranges from the standard library prior to C++20, since this is what people are most used to. Note that although the ranges themselves are from C++17, I will use some terminology/concepts/algorithms introduced later to explain how they relate to each other. Remember that to count as a range in C++, a type needs to have just <code>begin()</code> and <code>end()</code>. Everything else is bonus.</p>\n\t<p>\n\t\t[&hellip;]</p>\n\t<p>\n\t\tContainers are the ranges everyb",
        "id": 2746881,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/owning-and-non-owning-cpp-ranges-hannes-hauswedell",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Owning and non-owning C++ Ranges -- Hannes Hauswedell",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Meeting C++",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-22T14:18:45.632260+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-22T14:15:53+00:00",
        "description": "<p>\n\tSharing an opportunity for those needing assistance to travel and lodge: the conference hotel of Meeting C++ has special rooms for you!</p>\n<blockquote>\n\t<p>\n\t\t<a href=\"https://meetingcpp.com/meetingcpp/news/items/Visit-Meeting-Cpp-2025-with-assistance-and-your-wheelchair.html\">Visit Meeting C++ 2025 with assistance and your wheelchair</a></p>\n\t<p>\n\t\tby Jens Weller</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tAs you may not be aware about this opportunity, I wanted to highlight that the Vienna House Andel&#39;s Berlin Hotel offers accessibility rooms for those who need them.</p>\n\t<p>\n\t\ta picture showing a shower with hand rails and a chair</p>\n\tMeeting C++ in Berlin has been visited by folks in wheel chairs, and I thought I highlight this possiblity. Recently when looking through pictures provided by my hotel contact, I&#39;ve seen aboves picture of an accessible bathroom, which sparked my interest in finding out more about them. While I knew they existed, I d",
        "id": 2744699,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/visit-meeting-cpp-2025-with-assistance-and-your-wheelchair",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Visit Meeting C++ 2025 with assistance and your wheelchair",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Vittorio Romeo",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-05-22T14:18:45.790089+00:00",
        "date_dead_since": null,
        "date_published": "2025-05-22T13:05:47+00:00",
        "description": "<p>\n\tIs it possible to write a simple iteration API that hides implementation details <em>and</em> lets users break and continue?</p>\n<p>\n\tHere&#39;s a new article about a lightweight solution using a `ControlFlow` enumeration!</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://vittorioromeo.com/index/blog/controlflow.html\"><strong>How to break or continue from a lambda loop?</strong></a></h3>\n\t<p>\n\t\tby Vittorio Romeo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tHere&rsquo;s an encapsulation challenge that I frequently run into: how to let users iterate over an internal data structure without leaking implementation details, but still giving them full control over the loop?</p>\n\t<p>\n\t\tImplementing a custom iterator type requires significant boilerplate and/or complexity, depending on the underlying data structure.</p>\n\t<p>\n\t\tCoroutines are simple and elegant, but the codegen is atrocious &ndash; definitely unsuitable for hot paths.</p>\n</blockquote>\n<p>\n\t&nbsp;</p>",
        "id": 2744700,
        "language": null,
        "link": "https://isocpp.org//blog/2025/05/how-to-break-or-continue-from-a-lambda-loop-vittorio-romeo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to break or continue from a lambda loop? -- Vittorio Romeo",
        "vote": 0
    }
]