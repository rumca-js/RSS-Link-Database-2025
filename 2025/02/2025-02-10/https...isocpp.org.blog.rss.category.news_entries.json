[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-02-10T19:19:55+00:00",
        "description": "<p>\n\tIt is now 45+ years since C++ was first conceived. As planned, it evolved to meet challenges, but many developers use C++ as if it was still the previous millennium. This is suboptimal from the perspective of ease of expressing ideas, performance, reliability, and maintainability.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://cacm.acm.org/blogcacm/21st-century-c/\">21st Century C++</a></h3>\n\t<p>\n\t\tby&nbsp;Bjarne Stroustrup</p>\n</blockquote>\n<p>\n\tAbout the article:</p>\n<blockquote>\n\t<p>\n\t\tHere, I present the key concepts on which performant, type safe, and flexible C++ software can be built: resource management, life-time management, error-handling, modularity, and generic programming. At the end, I present ways to ensure that code is contemporary, rather than relying on outdated, unsafe, and hard-to-maintain techniques: guidelines and profiles.</p>\n</blockquote>",
        "id": 2084727,
        "language": null,
        "link": "https://isocpp.org//blog/2025/02/https-cacm.acm.org-blogcacm-21st-century-c",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "21st Century C++ -- Bjarne Stroustrup",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-02-10T19:11:57+00:00",
        "description": "<p>\n\tAlex shows in his small framework a different approach for serialization of data structures.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://github.com/amarmer/SerializationByContract\">Serialization by contract</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tBy Alex Marmer</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tIn any project, when a function is created for serialization, another function is created for unserialization.</p>\n\t<p>\n\t\tSerialization by contrast uses another approach - a contract with name and data structures is declared, and then serialization and unserialization of the data are automatic.</p>\n</blockquote>",
        "id": 2084728,
        "language": null,
        "link": "https://isocpp.org//blog/2025/02/serialization-by-contract1",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Serialization by contract -- Alex Marmer",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-02-10T19:06:00+00:00",
        "description": "<p>\n\tIn this article, we briefly explain everything you need to know to get started with Contracts as proposed for C++26 in P2900.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://timur.audio/contracts_explained_in_5_mins\">Contracts for C++ explained in 5 minutes</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Timur Doumler</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tWith P2900, we propose to add contract assertions to the C++ language. This proposal is in the final stages of wording review before being included in the draft Standard for C++26.</p>\n\t<p>\n\t\tIt has been suggested by some members of the C++ standard committee that this feature is too large, too complicated, and hard to teach. As it turns out, the opposite is true: contract assertions are actually very simple and can be explained in just five minutes. In this blog post, we will do exactly this!</p>\n</blockquote>",
        "id": 2084339,
        "language": null,
        "link": "https://isocpp.org//blog/2025/02/https-timur.audio-contracts_explained_in_5_mins",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Contracts for C++ explained in 5 minutes -- Timur Doumler",
        "vote": 0
    }
]