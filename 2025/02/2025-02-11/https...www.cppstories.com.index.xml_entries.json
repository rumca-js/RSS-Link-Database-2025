[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-02-11T00:00:00+00:00",
        "description": "<p>In graph theory, an <strong>adjacency matrix</strong> is a square matrix used to represent a finite (and usually dense) graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not, and in weighted graphs, they store the edge weights.</p>\n<p>In many beginner-level tutorials, adjacency matrices are implemented using <strong>vector of vectors</strong> (nested dynamic arrays), but this approach has inefficiencies due to multiple memory allocations. C++23 introduces <code>std::mdspan</code>, which provides a more efficient way to handle multi-dimensional data structures without the overhead of nested containers.</p>\n<p>In this blog post we&rsquo;ll explore various implementations of an adjacency matrix, starting with a basic approach and progressively improving it using <code>std::mdspan</code>.</p>\n<h2 id=\"starting-slow\">\nStarting slow \n  \n<a class=\"hash-link\" href=\"#starting-slow\" aria-hidden=\"true\">\n<svg class=\"fill-current o-60 hover-accent-color-light\"",
        "id": 2093694,
        "language": "en-us",
        "link": "https://www.cppstories.com/2025/cpp23_mdspan_adj",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 47,
        "source_url": "https://www.cppstories.com/index.xml",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Adjacency Matrix and std::mdspan, C++23",
        "vote": 0
    }
]