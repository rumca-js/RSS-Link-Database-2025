[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-29T18:30:28+00:00",
        "description": "<p>\n\t<img alt=\"Depositphotos_498706732_S.jpg\" src=\"https://isocpp.org/files/img/Depositphotos_498706732_S.jpg\" style=\"width: 200px; margin: 10px; float: right; height: 200px;\" />C++26 will introduce a new concurrency feature called std::execution, or senders/receivers. Lucian Radu Teodorescu explains the idea and how to use these in detail.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accu.org/journals/overload/32/184/teodorescu/\">Senders/Receivers: An Introduction</a></h3>\n\t<p>\n\t\tby Lucian Radu Teodorescu</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tIn June 2024, at the WG21 plenary held in St. Louis, the P2300R10:&nbsp;<code>std::execution</code>&nbsp;paper [<a href=\"https://accu.org/journals/overload/32/184/teodorescu/#_idTextAnchor003\">P2300R10</a>], also known as senders/receivers, was formally adopted for inclusion in C++ 26. The content of the paper quickly found its way into the working draft for the C++ standard [<a href=\"https://accu.org/journals/overload/3",
        "id": 1998083,
        "language": null,
        "link": "https://isocpp.org//blog/2025/01/senders-receivers-an-introduction-lucian-radu-teodorescu",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Senders/Receivers: An Introduction -- Lucian Radu Teodorescu",
        "vote": 0
    }
]