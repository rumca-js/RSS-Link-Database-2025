[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T20:53:15+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>In short, a django backend needs to run an arm64 binary file, interaction works on host with no problems. </p> <p>Right now I&#39;m building the django container from python:latest, which has glibc 2.36, but the binary has 2.39 dependencies.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/kelemangiar0\"> /u/kelemangiar0 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1i58qmd/glibc_239_python_container/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1i58qmd/glibc_239_python_container/\">[comments]</a></span>",
        "id": 1938033,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i58qmd/glibc_239_python_container",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "GLIBC >= 2.39 python container?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T20:46:59+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dwaxe\"> /u/dwaxe </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/jan/19/django-earns-the-chaoss-dei-bronze-badge/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1i58kzh/django_earns_the_chaoss_dei_bronze_badge/\">[comments]</a></span>",
        "id": 1938031,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i58kzh/django_earns_the_chaoss_dei_bronze_badge",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django earns the CHAOSS DEI Bronze badge \ud83e\udef6",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T20:34:51+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/thibaudcolas\"> /u/thibaudcolas </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/jan/19/django-earns-the-chaoss-dei-bronze-badge/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1i58ah9/django_earns_the_chaoss_dei_bronze_badge/\">[comments]</a></span>",
        "id": 1938032,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i58ah9/django_earns_the_chaoss_dei_bronze_badge",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django earns the CHAOSS DEI Bronze badge \ud83e\udef6",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T16:39:23+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>In my Loan Origination System project, I have various models with predefined default fields. When a given institution integrates its data, I&#39;m cognizant that each different institution is likely to have its own user-defined fields that won&#39;t have a (key-value) match to the default fields.</p> <p>I need to be able to allow system admins to make use of their user-defined fields on the front-end. Additionally, allowing the ability to create new user defined fields within the system, for data they may want stored in the application but not necessarily on their core. Ideally, I&#39;d accomplish this without substantially changing the structure of each model and changes to the schemas.</p> <p>I realize I could just add a single JSON field to each model. However, wouldn&#39;t I then be required to handle validation and field-types at the application level?</p> <p>Instead, will something like this work? Are there better approaches?</p> <pre><code>fro",
        "id": 1937285,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i52ktd/adding_metadatadriven_user_defined_fields_will",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Adding Metadata-Driven User Defined Fields. Will This Work?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T09:01:09+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello fellow devs, I have an issue in django &amp; DRF.</p> <p>I&#39;ve been doing <strong>Bookstore</strong> project in <em>React</em> &amp; <em>Django</em> with <em>DRF</em> and <em>Axios</em> library. This app offers basic CRUD functionality with fields like Name, Author, Language, Genre. GET and POST requests work as I intend. I am having issues with PATCH request. When I edit fields, frontend properly sends PATCH request to the backend but it&#39;s not reflecting in database. If I edit through DRF API root page, it gets the job done. But not directly through React frontend. I attached backend code snippets for your reference. Please help:</p> <p>views.py:</p> <pre><code>from django.shortcuts import render from rest_framework import viewsets from .models import * from .serializer import * # Create your views here. class BookView( viewsets . ModelViewSet ): queryset = Book.objects.all() serializer_class = BookSerializer </code></pre> <p>serializer",
        "id": 1935422,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i4ugjy/data_not_reflecting_in_database",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Data not reflecting in database",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T08:11:02+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>When I use the @login_required to any function and tries to login to that function it won&#39;t redirects.why</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Bright-Buyer2553\"> /u/Bright-Buyer2553 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1i4ts7p/login_required_in_django/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1i4ts7p/login_required_in_django/\">[comments]</a></span>",
        "id": 1935225,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i4ts7p/login_required_in_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "@login_required in django",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T08:00:44+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Would like to know from any practioners on here making use of Django_crm. What is your uses cases and how does it stack up against CRMs like Zoho and Odoo? Also how easy is it to integrate with modern tools like AI agents?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/barnez29\"> /u/barnez29 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1i4tmzp/django_crm_integration_and_use_cases/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1i4tmzp/django_crm_integration_and_use_cases/\">[comments]</a></span>",
        "id": 1935226,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i4tmzp/django_crm_integration_and_use_cases",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django_crm integration and use cases",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-01-19T05:34:19+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Why is it that when I have this permission, I can&#39;t access Swagger (if that&#39;s what it&#39;s called)?</p> <pre><code>class UserRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView): queryset = CustomUser.objects.prefetch_related(&#39;address&#39;) serializer_class = CustomUserSerializer permission_classes = [IsAuthenticated] def get_permissions(self): if self.request.method == &#39;GET&#39;: return [IsAuthenticated()] elif self.request.method in [&#39;PUT&#39;, &#39;PATCH&#39;]: if self.request.user.has_perm(&#39;users.change_customuser&#39;): return [IsAuthenticated()] raise PermissionDenied(&quot;You do not have permission to perform this action.&quot;) elif self.request.method == &#39;DELETE&#39;: if self.request.user.has_perm(&#39;users.delete_customuser&#39;): return [IsAuthenticated()] raise PermissionDenied(&quot;You do not have permission to perform this action.&quot;) return [IsAuthenticated()] </code></pre> </div><!-- SC_ON --> ",
        "id": 1934759,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1i4rgfg/drf_spectacular",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "DRF Spectacular",
        "vote": 0
    }
]