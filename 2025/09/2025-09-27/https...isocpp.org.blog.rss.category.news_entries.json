[
    {
        "age": null,
        "album": "",
        "author": "niekb",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-27T21:29:01.789469+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-27T21:01:08+00:00",
        "description": "<p>\n\tPassing a string temporary into a string_view can make the latter dangling&nbsp;</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://niekbouman.blogspot.com/2025/07/safely-passing-stdstrings-and.html\">Safely passing std::strings and std::string_view</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Niek J Bouman</p>\n</blockquote>\n<p>\n\t<em>From the article:</em></p>\n<blockquote>\n\t<p>\n\t\tMany of you will agree that C++ is a language that comes with sharp edges. One example is `std::string_view`; introduced as a type to prevent unnecessary std::string-copies, but it introduces a new footgun, namely when passing a temporary string into it:</p>\n</blockquote>",
        "id": 3679614,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/09/safely-passing-strings-and-string_views",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Safely passing strings and string_views -- Niek J Bouman",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "niekb",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-27T21:29:01.885291+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-27T20:59:03+00:00",
        "description": "<p>\n\tSometimes some object A needs to interact with another object B, e.g., A calls one of B&rsquo;s methods. In a language like C++, it is left to the programmer to assure that B outlives A; if B happens to be already destructed, this would be a use-after-free bug. Managing object lifetimes can be tricky, especially with asynchronous code.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://techblog.rosemanlabs.com/c++/safety/object-lifetime/2025/08/28/a-safe-pointer-that-protects-against-use-after-free-and-updates-when-the-pointee-is-moved.html\">A safe pointer in C++ that protects against use after free and updates when the pointee is moved</a></h3>\n\t<p>\n\t\tby Niek J. Bouman</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tWe propose a design for a safe pointer to an object of type T that is weak in that it does not have ownership semantics, and gets notified in case the pointee is either destructed or moved.</p>\n\t<p>\n\t\tWe will pay a price at runtime for these extra guarantees ",
        "id": 3679615,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/09/a-safer-cpp-pointer-class-niek-bouman",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "A safer C++ pointer class -- Niek J. Bouman",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "Giovanni Dicanio",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-27T21:29:01.981411+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-27T20:54:24+00:00",
        "description": "<p>\n\tSome reflections on a harsh critic by Linus Torvalds on a RISC-V Linux kernel contribution.&nbsp;</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://giodicanio.com/2025/08/27/linus-torvalds-and-the-supposedly-garbage-code/\">Linus Torvalds and the Supposedly &ldquo;Garbage Code&rdquo;</a></h3>\n</blockquote>\n<blockquote>\n\t<p>\n\t\tby Giovanni Dicanio</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tSo, the correct explicit code is not something as simple as &ldquo;(a &lt;&lt; 16) + b&rdquo;.</p>\n\t<p>\n\t\t[...]&nbsp;As you can see, the type casts, the parentheses, the potential bit-masking, do require attention. But once you get the code right, you can safely and conveniently reuse it every time you need!</p>\n</blockquote>\n<p>\n\t&nbsp;</p>",
        "id": 3679616,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/09/linus-torvalds-and-the-supposedly-garbage-code-giovanni-dicanio",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Linus Torvalds and the Supposedly Garbage Code -- Giovanni Dicanio",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "daminetreg",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-27T21:29:02.074590+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-27T20:50:20+00:00",
        "description": "<p>\n\tCppCon 2025 was packed with exciting talks, deep dives, and great conversations.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://tipi.build/blog/20250925-CppCon2025\">CppCon 2025 Trip Report</a></h3>\n\t<p>\n\t\tby&nbsp;tipi.build by EngFlow</p>\n</blockquote>\n<p>\n\tAbout the report</p>\n<blockquote>\n\t<p>\n\t\ttipi.build by EngFlow attended both as a developer team and as a CppCon sponsor. Discover in our trip report the highlights from the sessions we attended and the talks we gave, How monday&rsquo;s afternoon break started with ice cream + key takeaways and resources if you&rsquo;d like to dive deeper.</p>\n</blockquote>",
        "id": 3679617,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/09/cppcon-2025-trip-report-tipi.build-by-engflow",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "CppCon 2025 Trip Report \u2013 tipi.build by EngFlow",
        "vote": 0
    }
]