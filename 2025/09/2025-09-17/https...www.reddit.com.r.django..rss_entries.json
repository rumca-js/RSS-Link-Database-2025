[
    {
        "age": null,
        "album": "",
        "author": "/u/Necessary-Ad8108",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T23:34:16.784354+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T22:37:53+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi all,</p> <p>I am working on a Django project which is hosted at api.site.com.</p> <p>We also perform internal administrative duties using the Django admin. Since the app is hosted on that domain, the admin ends up getting served at api.site.com/admin. It&#39;s a little thing but this has been bothering me, as it feels wrong for static webpages to be served from an API domain. I was wondering what the best way to handle this is.</p> <p>Unfortunately I cannot change the URL to site.com/admin and site.com/api because we currently service external users with our API.</p> <p>I can add a second domain (let&#39;s say admin.site.com), but I want to ensure that API requests cannot access admin URLs and vice versa. I was thinking about writing custom middleware for this but wanted to ask if anyone has encountered a similar problem. Let me know if I am thinking about this wrong, thanks.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.re",
        "id": 3601454,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1njrj7w/separating_admin_and_api_domains",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Separating admin and API domains",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/dwaxe",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T19:55:35.017429+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T19:16:52+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dwaxe\"> /u/dwaxe </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/sep/17/django-60-alpha-released/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1njmhk9/django_60_alpha_1_released/\">[comments]</a></span>",
        "id": 3600074,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1njmhk9/django_60_alpha_1_released",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django 6.0 alpha 1 released",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/huygl99",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T18:44:40.256084+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T18:16:49+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/huygl99\"> /u/huygl99 </a> <br/> <span><a href=\"/r/Python/comments/1njkn7a/fastchannels_websocket_layer_utility_portbased_on/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1njkvqd/fastchannels_websocket_layer_utility_portbased_on/\">[comments]</a></span>",
        "id": 3599557,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1njkvqd/fastchannels_websocket_layer_utility_portbased_on",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Fast-Channels: WebSocket + Layer Utility Port/Based on Django Channels",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/__ddiamond__",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T18:44:39.930798+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T17:33:21+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello everybody. </p> <p>I\u2019ve been working with Django for a while now, however, most of the weightlifting I did myself, no handholding, no sugarcoating. And I would really like to hear from the community. </p> <p>I\u2019m looking for the must-know packages that may prove extremely useful, packages that extend or alter the already existing toolkit. As for myself, I found django-unfold, django-silk, and on my way to moving a 30+k line project to django-ninja. I also know about Wagtail but for now it is not applicable for me. I think knowing the existence of all of them is essential to building a strong enterprise Django project. </p> <p>Mostly I am considering tools for the mentioned service. It handles a single hefty calculation endpoint with a bunch of long running tasks which I run with Celery and use PG as a result backend. But both more specific and more generic tools are most welcome. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https:/",
        "id": 3599556,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1njjo8o/mustknow_django_packages",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Must-know Django packages",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/EndCompetitive5284",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T14:44:08.475169+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T13:42:50+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m creating React project that have customer inquiry form, working: when customers fill form with inquiry, that data should go to business email using DRF. Anyone please help me I&#39;m beginner.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/EndCompetitive5284\"> /u/EndCompetitive5284 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1njdiyo/send_reactjs_form_data_to_business_email_using/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1njdiyo/send_reactjs_form_data_to_business_email_using/\">[comments]</a></span>",
        "id": 3597392,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1njdiyo/send_reactjs_form_data_to_business_email_using",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Send ReactJS form data to business email using Django/DRF",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/PSBigBig_OneStarDao",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T10:53:19.943055+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T10:40:59+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>hi folks, last time i posted about \u201csemantic firewalls\u201d and it was too abstract. this is the ultra simple django version that you can paste in 5 minutes.</p> <p><strong>what this does in one line</strong> instead of fixing bad llm answers after users see them, we check the payload before returning the response. if there\u2019s no evidence, we block it politely.</p> <p><strong>before vs after</strong></p> <ul> <li>before: view returns a fluent answer with zero proof, users see it, you fix later</li> <li>after: view includes small evidence, middleware checks it, only stable answers go out</li> </ul> <p>below is a minimal copy-paste. it works with any provider or local model because it\u2019s just json discipline.</p> <hr/> <h3>1) middleware: block ungrounded answers</h3> <p><code>core/middleware.py</code></p> <p>```python</p> <h1>core/middleware.py</h1> <p>import json from typing import Callable from django.http import HttpRequest, HttpResponse, JsonResponse</p> ",
        "id": 3595502,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nj9mmu/stop_wrong_ai_answers_in_your_django_app_before",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "stop wrong ai answers in your django app before they show up: one tiny middleware + grandma clinic (beginner, mit)",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Own_Active_2147",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T10:53:20.111605+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T10:40:29+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m gonna work on a full stack website soon with react as the front end and Django drf as the backend. This is for a school project</p> <p>From my basic research I know this can either be done using sessions or jwt tokens. I really want to try implementing jwt tokens so I can learn how they work, but at the same time I&#39;m seeing a lot of people say jwt tokens are pretty deep and if done incorrectly can introduce serious security vulnerabilities.</p> <p>My question is: Are these concerns addressed by the simplejwt library for Django? And how worried do I have to be about implementing them?</p> <p>Thanks</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Own_Active_2147\"> /u/Own_Active_2147 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1nj9mbh/jwt_tokens/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1nj9mbh/jwt_tokens/\">[comments]</a></span>",
        "id": 3595503,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nj9mbh/jwt_tokens",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "JWT tokens",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Warm_Alfalfa7218",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T09:37:15.607991+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T09:09:25+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey, everyone I wanna ask a question. I have to learn Django. Which materials are good and furthermore one more question. I dunno either watching YouTube videos or reading materials through sites are good</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Warm_Alfalfa7218\"> /u/Warm_Alfalfa7218 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1nj84dy/django/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1nj84dy/django/\">[comments]</a></span>",
        "id": 3594958,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nj84dy/django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Both-Raise3712",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-17T08:25:03.166043+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-17T08:18:41+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey all,</p> <p>I\u2019m working on a web platform (edtech/medical prep app)hosted on AWS, where the backend is dockerized (Django + PostgreSQL). We\u2019re working with an external backend developer. From a <strong>GDPR and security perspective</strong>, I want to make sure this developer:</p> <ul> <li>Can never access real production data (emails, personal info).</li> <li>Cannot \u201cremove\u201d restrictions or grant themselves access.</li> <li>Still has what they need to build and maintain the backend.</li> </ul> <p>I know Postgres supports roles, column-level permissions, views, and even row-level security, but I\u2019m concerned that if someone has high enough privileges, they can just undo all of that.</p> <p>So my questions are:</p> <ol> <li>How do companies usually handle this? Do they just completely ban devs from production and only use staging with anonymized data?</li> <li>If I create a restricted Postgres role (no superuser, no createrole), is that 100% safe ag",
        "id": 3594561,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nj7cpp/how_to_fully_restrict_postgres_data_access_from",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to fully restrict Postgres data access from external backend developer (GDPR compliance)",
        "vote": 0
    }
]