[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-02T21:56:46.908121+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-02T21:55:00+00:00",
        "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 150px; margin: 10px; float: right; height: 153px;\" />In&nbsp;<a href=\"https://www.sandordargo.com/blog/2025/07/09/cpp26-format-part-1\">Part 1</a>, we explored the improvements C++26 brings to&nbsp;<code>std::format</code>&nbsp;&mdash; from better&nbsp;<code>to_string</code>&nbsp;behavior to compile-time safety checks. In this part, we look at runtime formatting, defect fixes, and support for new types like&nbsp;<code>std::filesystem::path</code>.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2025/07/16/cpp26-format-part-2\">C++26: std::format improvements (Part 2)</a></h3>\n\t<p>\n\t\tby&nbsp;Sandor Dargo&nbsp;</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p id=\"runtime-format-strings\">\n\t\t<strong>Runtime format strings</strong></p>\n\t<p>\n\t\t<a href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html\">P2216R3</a>&nbsp;brought quite",
        "id": 3480360,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/09/cpp26-stdformat-improvements-part-2-sandor-dargo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG",
        "title": "C++26: std::format improvements (Part 2) -- Sandor Dargo",
        "vote": 0
    }
]