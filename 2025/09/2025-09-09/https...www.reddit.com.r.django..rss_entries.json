[
    {
        "age": null,
        "album": "",
        "author": "/u/AshamedComputer7912",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-09T14:44:44.108401+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-09T13:53:05+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I\u2019ve been using Django REST Framework to build my first single-page application after having worked mostly with traditional server-side rendered Django apps. But I\u2019ve noticed that Django, by default, has many features that don\u2019t seem to align with RESTful principles, like the session middleware that breaks everything if you don&#39;t use it and django-allauth\u2019s reliance on sessions and SSR patterns, even when used in \u201cheadless\u201d mode. These features feel so deeply ingrained in Django\u2019s architecture that making a DRF API fully RESTful feels clunky to me.</p> <p>Since I\u2019m new to SPAs and the general architecture of them, I\u2019m wondering if I might be approaching this the wrong way, or if I\u2019ve misunderstood DRF\u2019s purpose. Am I doing something wrong in development to make DRF APIs so clunky, or is it just better suited for hybrid SSR/SPA apps?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/AshamedComputer7912\"> /u/Asha",
        "id": 3532128,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1ncjj9c/is_django_drf_actually_restful",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Is Django (DRF) actually RESTful?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/OwlDoggo129",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-09T14:44:44.218558+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-09T13:44:55+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello! I am currently developing a project that aims to create a dashboard for descriptive, predicive and prescriptive data. Does anyone know any libaries that can help visualizing clustering 2d-3d data on Django?</p> <p>Other advice on predictive and prescriptive data would be good too but right now I am mainly looking for descriptive. I dont wanna use matplotlib lol. </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/OwlDoggo129\"> /u/OwlDoggo129 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1ncjc3j/libraries_that_allows_interactive_visualization/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1ncjc3j/libraries_that_allows_interactive_visualization/\">[comments]</a></span>",
        "id": 3532129,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1ncjc3j/libraries_that_allows_interactive_visualization",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Libraries that allows interactive visualization of descriptive, predictive and prescriptive data",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/PSBigBig_OneStarDao",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-09T12:19:45.323667+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-09T12:05:47+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>most of us have tried to bolt RAG or \u201cask our docs\u201d into a Django app, then spend weeks firefighting odd failures that never stay fixed. i wrote a Problem Map for this. it catalogs 16 reproducible failure modes you can hit in production and gives a minimal, provider-agnostic fix for each. single page per problem, MIT, no SDK required.</p> <h1>before vs after, in practice</h1> <ul> <li>typical setup checks errors after the model replies, then we patch with more tools, more regex, more rerankers. the same bug comes back later in another form.</li> <li>the Problem Map flow flips it. you run acceptance checks before generation. if the semantic state is unstable, you loop, reset, or redirect, then only generate output once it is stable. that is how a fix becomes permanent instead of another band-aid.</li> </ul> <h1>what this looks like in Django</h1> <ul> <li>No.5 semantic \u2260 embedding: pgvector with cosine on unnormalized vectors, looks great in cosine, wr",
        "id": 3530925,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nch1ye/production_django_with_retrieval_16_reproducible",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "production Django with retrieval: 16 reproducible failure modes and how to fix them at the reasoning layer",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/create_urself",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-09T08:47:20.300445+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-09T07:53:14+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m building a Notion/Airtable like application where a User(Workspace) would create tables dynamically during runtime - which means migrations will also need to happen during runtime(using SchemaEditor API).</p> <p>I&#39;m new to Django and would love to understand what&#39;s the best way to handle the model registry. The scale that I&#39;m designing for is - 500k workspaces * 5 tables per ws(avg) = 2.5 M tables in my postgres DB.</p> <p>I checked out the contenttypes source code and they are loading an in-memory cache for fast lookups. My current solution is to monkey-patch The `ContentTypeManager` to use in-memory(limited)+Redis cache.</p> <p>However, I&#39;m not confident if this is the best approach or would it cause unintended side-effects for django-admin, permissions, etc.</p> <p>Thank you!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/create_urself\"> /u/create_urself </a> <br/> <span><a href=\"https",
        "id": 3529456,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nccuk8/monkey_patching_contenttypes_to_register_millions",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Monkey patching contenttypes to register millions of models",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Individual_Try_1590",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-09T07:35:08.155498+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-09T06:56:18+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://preview.redd.it/uwed9r5x53of1.png?width=474&amp;format=png&amp;auto=webp&amp;s=48211322c924a446a1b2f11429342e22a7867d4f\">https://preview.redd.it/uwed9r5x53of1.png?width=474&amp;format=png&amp;auto=webp&amp;s=48211322c924a446a1b2f11429342e22a7867d4f</a></p> <p>Hey Django Folks! Back here to drip check Django again ! </p> <p><strong>This time I thought hey a favicon would be better to see where my Django Admin in 200s of tabs, and coming from other frameworks i am amazed how not straightforward it was for me .</strong> I have nearly laughed for 10-15 minutes and chucked a few times just realizing &quot;hah ,,, ! I had to do that to get a favicon up, LMAO \ud83e\udd23&quot;</p> <p>This small request/rant/note is about adding &quot;favicon&quot; to Django admin in &quot;2025&quot;; </p> <p>What we have to do &#39;JUST TO ADD A FAVICON&#39; in my DRF project</p> <ol> <li>Create a static folder [still ok]</li> <li>Tell Django where it lies in STATIC_U",
        "id": 3529133,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1ncbz93/django_in_2025_part2_adding_favicon_most_easy_way",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django in 2025 #Part-2 Adding Favicon ! Most easy way ever seen",
        "vote": 0
    }
]