[
    {
        "age": null,
        "album": "",
        "author": "/u/Grouchy-Ad1910",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-25T19:14:36.293790+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-25T19:02:20+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Grouchy-Ad1910\"> /u/Grouchy-Ad1910 </a> <br/> <span><a href=\"/r/FastAPI/comments/1nqfdxy/django_dev_here_need_to_learn_fastapi_in_3_weeks/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1nqfg7l/django_dev_here_need_to_learn_fastapi_in_3_weeks/\">[comments]</a></span>",
        "id": 3664483,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nqfg7l/django_dev_here_need_to_learn_fastapi_in_3_weeks",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django dev here - need to learn FastAPI in 3 weeks for work. What's the fastest path?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/No-Excitement-7974",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-25T11:55:20.587061+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-25T11:20:56+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>We&#39;ve hit the scaling wall with our decade-old Django monolith. We handle <strong>45,000 requests/minute (RPM)</strong> across <strong>1,500+ database tables</strong>, and the synchronous <strong>ORM calls</strong> are now our critical bottleneck, even with async views. We need to migrate to an <strong>async-native Python framework</strong>.</p> <p>To survive this migration, the alternative must meet these criteria:</p> <ol> <li><strong>Python-Based</strong> (for easy code porting).</li> <li><strong>ORM</strong> support similar to Django,</li> <li><strong>Stability &amp; Community</strong> (not a niche/beta framework).</li> <li><strong>Feature Parity:</strong> Must have good equivalents for: <ul> <li><strong>Admin Interface</strong> (crucial for ops).</li> <li><strong>Template system.</strong></li> <li><strong>Signals/Receivers</strong> pattern.</li> <li><strong>CLI Tools</strong> for <strong>migrations</strong> (<code>makemigrations</code>, <code",
        "id": 3661297,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nq42ez/django_to_fastapi",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django to FastAPI",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/netzure",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-25T10:51:58.035349+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-25T10:43:10+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Over the past week on X I have seen Python get a lot of hate from the developer community for being incredibly slow compared to other languages like Rust, Java and C#. Many commented that Python is only good for small projects and that any large projects need to be rewritten in another faster language. Obviously there have been several large Django based projects, most notably early Instagram. Do you think Pythons and therefore Django\u2019s relative slowness is overstated? Does Python\u2019s performance hold back Django usage?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/netzure\"> /u/netzure </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1nq3dxx/python_hate_on_x/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1nq3dxx/python_hate_on_x/\">[comments]</a></span>",
        "id": 3660919,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1nq3dxx/python_hate_on_x",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Python hate on X",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Siemendaemon",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-25T07:44:41.857100+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-25T07:01:39+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I am trying to determine whether Django&#39;s JSONField is deserialized when I access other non-JSON fields in a model instance, or if it only deserializes when the JSONField itself is accessed.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Siemendaemon\"> /u/Siemendaemon </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1npzz2a/does_django_jsonfield_deserialize_only_when/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1npzz2a/does_django_jsonfield_deserialize_only_when/\">[comments]</a></span>",
        "id": 3660025,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1npzz2a/does_django_jsonfield_deserialize_only_when",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Does Django JSONField deserialize only when accessed, or immediately when the queryset is executed?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Real-Example179",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-09-25T05:36:00.626718+00:00",
        "date_dead_since": null,
        "date_published": "2025-09-25T05:24:59+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi, </p> <p>I&#39;ve been developing with Django for a while now, and if there is something I struggled with, it was the time spent doing the important, boring, and repetitive work every time before even building the main features (Stripe, deployment, configuring auth, mails, connecting to React...). I wanted to go around this by buying a solution, yet all of them were either too expensive or outdated. </p> <p>So for the past months I&#39;ve spent building quarkkit.com. Production-ready SaaS Django boilerplate that has all the important stuff configured plus AI agent rules that force your AI assistant to follow best practices and test-driven development for the best results. </p> <p>For the first few users, I&#39;m giving a big discount and the option to get help from me when you need any. All I&#39;m currently looking for is some feedback and validation. Thanks!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Re",
        "id": 3659494,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1npyfu5/modern_django_saas_boilerplate_looking_for_first",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Modern Django SaaS boilerplate, looking for first users",
        "vote": 0
    }
]