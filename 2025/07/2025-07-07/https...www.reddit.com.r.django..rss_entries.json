[
    {
        "age": null,
        "album": "",
        "author": "/u/russ_ferriday",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T22:53:20.576715+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T22:04:18+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I recently published under the MIT License a Django app for face recognition authentication using DeepFace and pgvector. It&#39;s intended for audiences where the same group of people authenticate frequently without remembering their passwords, or want minimal keyboard usage. It uses the camera built in to your laptop or screen - in the same way you might use MS Teams, Google Meet, or WhatsApp.<br/> It works fine with a good CPU, but will fly with a GPU.<br/> I would probably use it with the default settings, but there are options you can experiment with in different environments. Because of the use of pgvector, which is currently not indexed, but can be very simply, it should be possible to support many thousands of user.<br/> Github stars and comments appreciated.<br/> <a href=\"https://github.com/topiaruss/django-deepface\">https://github.com/topiaruss/django-deepface</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.c",
        "id": 3108092,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1lu7hou/deepface_authentication_library_and_demo_site",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Deepface authentication - library and demo site",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/duksen",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T19:38:27.426075+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T18:50:57+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi, I am building a Django app which will have large enterprise companies as customers. </p> <p>So far I am thinking about deploying to Azure and a managed PostgreSQL database hosted there as well. </p> <p>What should I focus on to satisfy enterprise customers it departments doing a procurement phase? What would they focus on most likely?<br/> How should I position myself as well so they will have confidence? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/duksen\"> /u/duksen </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lu2izh/django_enterprise_security/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lu2izh/django_enterprise_security/\">[comments]</a></span>",
        "id": 3106821,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1lu2izh/django_enterprise_security",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django enterprise security",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Baked_Potato2005",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T17:28:32.107029+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T17:23:38+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi everyone. I am building a fullstack app using Django Rest framework and React. I have setup a backend view to send the username of the current user</p> <pre><code>@api_view([&quot;GET&quot;]) @permission_classes([AllowAny]) def request_user(request): print(request.user) if request.user: return Response({ &quot;username&quot;: str(request.user) }) else: return Response({ &quot;username&quot;: &quot;notfound&quot; }) </code></pre> <p>And i am fetching its using axios at the frontend</p> <pre><code>const api = axios.create({ baseURL: import.meta.env.VITE_API_URL, withCredentials: true, // This is crucial headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, } }); </code></pre> <p>This is my home component (api is imported from above)</p> <pre><code>function Home() { const [user, setUser] = useState(null); useEffect(() =&gt; { api.get(&quot;/api/getuser/&quot;).then((res) =&gt; { setUser(res.data.username); console.log(res); }).catch((err) =&g",
        "id": 3105678,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lu078u/user_cant_be_fetched_from_the_frontend_even_when",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "User cant be fetched from the frontend even when logged in",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Piko8Blue",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T16:24:21.216126+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T16:04:31+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Up until very recently I was super nervous about changing a Django project&#39;s name. I always thought it would mess everything up, especially with all the imports and settings involved.</p> <p>But once I actually tried it, I realized it is a very simple process.. It only takes a few minutes (if not seconds). I put together a short <a href=\"https://youtu.be/Ak4XA5QK3_w\">tutorial/demonstration</a> in case anyone else is feeling the same anxiety about it. </p> <p>In the video, I walk through renaming a freshly cloned Django starter project.</p> <p>Here is the link:<br/> <a href=\"https://youtu.be/Ak4XA5QK3_w\">https://youtu.be/Ak4XA5QK3_w</a></p> <p>I would love to hear your thought &amp;&amp;/|| suggestions.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Piko8Blue\"> /u/Piko8Blue </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lty35t/i_had_no_idea_changing_a_django_project_name_was/\">[link]</a><",
        "id": 3105174,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lty35t/i_had_no_idea_changing_a_django_project_name_was",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "I had no idea changing a Django Project Name was that easy; I recorded the process in case others are afraid of trying...",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/MDTv_Teka",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T15:17:28.887958+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T15:16:19+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey yall! I need to host a very simple DRF REST API that will be accompanied by a small SQLite db. What is the cheapest option to do so? All I need is for a static FE app to be able to make calls to it. Thanks for your time!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/MDTv_Teka\"> /u/MDTv_Teka </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1ltwu83/cheapest_platform_to_host_a_drf_api/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1ltwu83/cheapest_platform_to_host_a_drf_api/\">[comments]</a></span>",
        "id": 3104541,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ltwu83/cheapest_platform_to_host_a_drf_api",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Cheapest platform to host a DRF API?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/pm4tt_",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T11:17:51.525666+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T10:55:10+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have a simple public API with a few endpoints and I&#39;m encountering potential deadlock issues with my Django application. I have a background task that processes game data and updates <code>Game</code> and <code>Player</code> records from replays files sent to the endpoint. </p> <p>I&#39;m using <code>select_for_update()</code> within <code>transaction.atomic()</code> blocks to ensure data integrity, as multiple concurrent tasks might try to modify the same player records. </p> <p>My main concern is that if multiple tasks process games that share players (eg. Player A is in both Game X and Game Y), it could lead to deadlocks. In my current code, the stats_players list is not sorted before iterating to perform updates. </p> <p>Questions : </p> <p>1/ Is the lack of sorting players_in_game a likely cause of deadlocks here ? </p> <p>2/ If so, would adding a sort (sorted(players_in_game, key=lambda p: (p[&#39;toon_id&#39;], p[&#39;region&#39;]))) be a",
        "id": 3102838,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ltr4dm/how_would_you_handle_these_deadlock_issues",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How would you handle these deadlock issues ?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/mstrsplntr1",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T11:17:51.359264+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T10:39:02+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi everyone!</p> <p>I have a Django+HTMX app - <a href=\"http://easypumf.com\">easypumf.com</a> - hosted on Railway (Hobby tier), and HTTP request load times are quite inconsistent. &quot;Waiting for server response&quot; times are often very slow (1-15 seconds), but can then be normal (150-250ms) for no apparent reason. There is no real pattern to speeds (so it&#39;s not like it is getting faster after a few refreshes). I also do not have the &quot;serverless&quot; option enabled.</p> <p>My app has no such problem in my local environment. This issue affects every request, including simple partial HTML page loads with no DB connections or large static files. I tried: 1) using cache_control and Cloudflare to cache static pages; 2) adding a Procfile to increase the numbers of workers; 3) refactoring to minimise DB connections. Nothing worked so far.</p> <p>I tried reaching out to Railway&#39;s support site, but I don&#39;t have much hope there. </p> <p>Ca",
        "id": 3102837,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ltqukh/resolving_inconsistent_speeds_on_railway",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Resolving inconsistent speeds on Railway",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/devleoKing",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T06:59:33.114128+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T06:52:23+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>When your app starts slowing down from heavy tasks like email sending, image processing, or API calls, Celery is the game-changer you need. \u2705 What it does: Moves time-consuming tasks to background workers \u2705 Why it matters: Keeps your web app lightning-fast and responsive\u2705 Real impact: Handle 10x more users without breaking a sweat The magic: Instead of making users wait for slow operations, Celery processes them behind the scenes while your app stays snappy. Perfect for: Email campaigns, report generation, image resizing, data exports, third-party API calls Bottom line: Your users get instant responses, your servers stay healthy, and you can scale confidently. Stop letting slow tasks kill your user experience. Give Celery a try!</p> <h1>Django #Python #WebDevelopment #Scaling #BackendDevelopment</h1> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/devleoKing\"> /u/devleoKing </a> <br/> <span><a href=\"https://www.reddi",
        "id": 3101531,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ltndol/scaling_django_meet_celery_your_background_task",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "\ud83d\ude80 Scaling Django? Meet Celery - Your Background Task Hero",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Severe_Tangerine6706",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-07T05:54:16.093097+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-07T05:25:51+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Severe_Tangerine6706\"> /u/Severe_Tangerine6706 </a> <br/> <span><a href=\"/r/Django24/comments/1ltlz6v/whats_the_fastest_way_to_learn_django/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1ltm06b/whats_the_fastest_way_to_learn_django/\">[comments]</a></span>",
        "id": 3101266,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1ltm06b/whats_the_fastest_way_to_learn_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "What\u2019s the Fastest Way to Learn Django?",
        "vote": 0
    }
]