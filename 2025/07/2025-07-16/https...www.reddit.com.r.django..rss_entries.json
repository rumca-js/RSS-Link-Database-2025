[
    {
        "age": null,
        "album": "",
        "author": "/u/Logical_Turnover4127",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T19:57:16.101259+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T19:21:32+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi everyone,</p> <p>I\u2019m working on a fairly large Django project with a huge number of HTML templates, and I want to make the app multilingual. The problem is that manually adding <code>{% trans %}</code> or <code>{% blocktrans %}</code> tags to all the template strings is super time-consuming.</p> <p>Is there any tool or method to automate the insertion of <code>{% trans %}</code> tags in Django templates?</p> <p>Also, once I extract the strings into <code>.po</code> files, I\u2019d love to automate the translation process. Has anyone successfully used AI or services like DeepL or other to translate <code>.po</code> files automatically? Are there any tools, scripts, or workflows you\u2019d recommend for this?</p> <p>Any advice, tools, or experiences would be really appreciated. Thanks in advance!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Logical_Turnover4127\"> /u/Logical_Turnover4127 </a> <br/> <span><a href=\"https:",
        "id": 3182707,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m1lvuf/how_to_automatically_add_trans_blocks_in_html",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to automatically add {% trans %} blocks in HTML templates and auto-translate .po files?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/my_winter999",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T17:45:37.795249+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T17:33:54+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>hello all!</p> <p>so, for the past couple of years, I&#39;ve been maintaining two Django projects that were originally built back in 2018/2019. But now, we&#39;re kicking off a brand new project from scratch</p> <p>my question is, has anything major changed when it comes to starting a new Django project these days? Or is it still pretty much the usual <code>startproject</code> and <code>startapp</code> routine?</p> <p>Also, any <strong>special tips or things to watch out for</strong> when you&#39;re building a Django project from the ground up in 2025?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/my_winter999\"> /u/my_winter999 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1m1izsp/how_do_you_would_start_a_django_project_today/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1m1izsp/how_do_you_would_start_a_django_project_today/\">[comments]</a></span>",
        "id": 3181699,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m1izsp/how_do_you_would_start_a_django_project_today",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How do you would start a django project today?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Also-Human",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T17:45:37.964210+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T17:20:18+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello, I&#39;m a junior/mid-level developer in a small company, I&#39;m currently the only developer so I decide how solve the problems haha, what matters to them is that I solve. So now, I&#39;m in a situation where I&#39;m being asked for a webhook proxy, to receive events from a third-party service, process them, and repeat those same events to multiple endpoints in applications within our systems.</p> <p>The company already has an implementation of a proxy API in Django, which they use to interact with third-party services from a web application through our own API, but now they want to add the proxy webhook to the integrations.</p> <p>Do you think Django is the right tool to create a centralized intermediary for several of these external services?</p> <p>I know Celery has a reputation for being very efficient, but because of the issue of saturation or cascading drop I&#39;m hesitating whether to do it separately or something like microservices wi",
        "id": 3181700,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m1imln/create_an_integration_hub_with_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Create an integration hub with Django?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/dimitrym",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T14:30:06.744206+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T13:40:32+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Created a small video about Django Impersonate, which has helped me a lot. Also point to alternatives discussed in this sub</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dimitrym\"> /u/dimitrym </a> <br/> <span><a href=\"https://www.youtube.com/watch?v=Tk-ReE3qwE0\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1m1cvp4/djangoimpersonate_djangos_secret_weapon/\">[comments]</a></span>",
        "id": 3179787,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m1cvp4/djangoimpersonate_djangos_secret_weapon",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django-impersonate - Django's Secret Weapon",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/axioray",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T14:30:06.913067+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T13:24:17+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m building an e-commerce platform using:</p> <ul> <li><strong>React Native</strong> for the mobile frontend</li> <li><strong>Django Admin</strong> for back-office product and order management</li> <li><strong>FastAPI</strong> for providing async API services to the mobile app</li> </ul> <p>I have a few questions:</p> <ol> <li>Which framework should handle the <strong>CRUD logic</strong> for products, orders, etc. \u2014 Django or FastAPI?</li> <li>Is it a good idea to let Django Admin call FastAPI for data, or should it access the database directly?</li> <li>How should I structure the <strong>authentication</strong> system (e.g., JWT login)? Should FastAPI be the auth provider?</li> <li>If I plan to add AI-based features, how should I structure that service alongside Django and FastAPI?</li> <li>What&#39;s the recommended way to <strong>store and serve ML models</strong> (local folder, volume, or object storage)?</li> </ol> <p>Any architectural sugge",
        "id": 3179788,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m1cid7/should_crud_be_logic_across_django_admin_or",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Should CRUD be logic across django admin or fastapi in a hybrid system",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/stray-doggy",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T08:30:44.292437+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T07:51:44+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p><strong>Hello everyone, I&#39;m looking for a cost-effective solution to build an eCommerce backend using Django REST Framework.</strong><br/> I expect around <strong>500 users initially</strong>, but I want the architecture to be <strong>scalable</strong> as the user base grows.<br/> I&#39;m already familiar with <strong>Google Cloud Platform (GCP)</strong>, so I\u2019d prefer to use GCP services if possible.</p> <p>I\u2019d really appreciate any recommendations on:</p> <ul> <li>API structure</li> <li>Database choice</li> <li>Deployment setup</li> <li>Scalability considerations</li> <li>Any GCP tools that fit well with this stack</li> </ul> <p>Thanks in advance!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/stray-doggy\"> /u/stray-doggy </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1m16nat/how_to_design_a_scalable_drf_ecommerce_backend/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r",
        "id": 3177144,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m16nat/how_to_design_a_scalable_drf_ecommerce_backend",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to Design a Scalable DRF eCommerce Backend? Architecture, DB, Deployment Advice Needed",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Odd_Might_5866",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T03:05:54.288767+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T02:11:54+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;ve been working on a Django logging solution that solves a common problem: blocking your main application thread with logging operations.</p> <h1>The Problem</h1> <p>Traditional logging can block your main thread, especially when writing to databases or external services.</p> <h1>The Solution: Django Async Logger</h1> <p>I built logq - a reusable Django app that handles all logging in a separate thread, so your main application stays fast and responsive.</p> <h1>Key Features:</h1> <ul> <li>Asynchronous Logging - Zero impact on your main thread</li> <li>Thread-Safe - Uses a queue system for safe concurrent logging</li> <li>Metadata - Captures module, function, line, user ID, request ID</li> <li>REST API - External services can log via HTTP</li> <li>Middleware - Automatic request logging with unique IDs</li> <li>Performance Monitoring - Decorators for timing slow functions</li> <li>Auto Cleanup - Built-in management commands to prevent DB bloat</l",
        "id": 3175781,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m10p72/django_i_built_an_async_logging_package_that_wont",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "[Django] I built an async logging package that won't slow down your app - looking for testers! \ud83d\ude80",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Elieroos",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-16T00:57:23.514494+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-16T00:19:11+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I realized many roles are only posted on internal career pages and never appear on classic job boards. So I built an AI script that scrapes listings from 70k+ corporate websites.</p> <p>Then I wrote an ML matching script that filters only the jobs most aligned with your CV, and yes, it actually works.</p> <p>You can try it <a href=\"https://laboro.co/?utm_source=reddit&amp;utm_medium=organic&amp;utm_campaign=3\">here</a> (for free). </p> <p>(If you\u2019re still skeptical but curious to test it, you can just upload a CV with fake personal information, those fields aren\u2019t used in the matching anyway.)</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Elieroos\"> /u/Elieroos </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1m0ycoo/how_i_found_a_200k_software_engineer_job/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1m0ycoo/how_i_found_a_200k_software_engineer_job/\">[comm",
        "id": 3175250,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1m0ycoo/how_i_found_a_200k_software_engineer_job",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How I found a $200k Software Engineer job",
        "vote": 0
    }
]