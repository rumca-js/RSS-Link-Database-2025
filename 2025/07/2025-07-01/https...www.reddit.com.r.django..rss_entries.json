[
    {
        "age": null,
        "album": "",
        "author": "/u/Gandalf196",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T22:46:20.337569+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T21:44:07+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey folks,</p> <p>I\u2019m building a SaaS where each customer gets its own Postgres database, but all tenants share the same Django codebase + app server.<br/> I\u2019ve been working through the Agiliq e-book \u201cBuilding Multi-Tenant Applications with Django\u201d<br/> (<a href=\"https://books.agiliq.com/projects/django-multi-tenant/en/latest/\">https://books.agiliq.com/projects/django-multi-tenant/en/latest/</a>).</p> <p>It\u2019s great that the code is there, but IMO the explanations are super short\u2014often just a snippet with no real discussion on why a pattern was chosen, trade-offs, ops concerns, etc. I\u2019m hungry for something more verbose / \u201ctheory + practice\u201d.</p> <p>Thanks in advance!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Gandalf196\"> /u/Gandalf196 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lpeefc/looking_for_indepth_resources_on/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/d",
        "id": 3063437,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lpeefc/looking_for_indepth_resources_on",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Looking for in-depth resources on database-per-tenant architecture in Django",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/dxt0434",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.043071+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T20:30:38+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dxt0434\"> /u/dxt0434 </a> <br/> <span><a href=\"https://django.wtf/trending/?trending=30\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lpcjzr/trending_django_projects_in_june/\">[comments]</a></span>",
        "id": 3061416,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lpcjzr/trending_django_projects_in_june",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Trending Django projects in June",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Agreeable-Aside1866",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.553930+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T18:41:38+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p><strong>Hello Django developers,</strong><br/> In the part where the JWT token or any token expires, when the user logs out, we can only blacklist the refresh token. But what if they try to access something using the access token after logout?<br/> Of course, the access token&#39;s timespan is very short \u2014 like 5\u201310 minutes \u2014 but still, wouldn\u2019t this be considered a security loophole?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Agreeable-Aside1866\"> /u/Agreeable-Aside1866 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lp9qod/django_dev_question/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lp9qod/django_dev_question/\">[comments]</a></span>",
        "id": 3061419,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lp9qod/django_dev_question",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "DJANGO DEV. QUESTION",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/ToreroAfterOle",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.380294+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T17:31:46+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello, I have an async view where there are some http calls to an external and a couple of database calls. Normally, if it were a regular synchronous view using synchronous db calls, I&#39;d simply wrap everything in a</p> <pre><code>with transaction.atomic(): # sync http calls and sync db calls here </code></pre> <p>context. However, trying to do that in a block where there&#39;s async stuff will result in the expected SynchronousOnlyOperation exception. Before I go and make the entire view synchronous and either make synchronous versions of the http and db calls or wrap them all in async_to_sync, I thought I&#39;d ask: is there a recommended way to work around this in a safe manner?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ToreroAfterOle\"> /u/ToreroAfterOle </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lp7wbp/django_5_async_views_and_atomic_transactions/\">[link]</a></span> &#32; <sp",
        "id": 3061418,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lp7wbp/django_5_async_views_and_atomic_transactions",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django 5 async views and atomic transactions",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/mr_soul_002",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.757537+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T13:27:05+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I am using Django for a multi-tenant SaaS product with Django ORM. My application is hosted on AWS, and I&#39;m using a load balancer with a 60-second timeout. When I create a new tenant, it triggers the creation of tenant-specific tables. However, the table creation takes longer than 60 seconds, causing a server timeout error, although the tables are created correctly.</p> <p>I adjusted the server timeout from 60 seconds to 150 seconds, but the issue still persists. How can I ensure that tenant table creation works smoothly in a large-scale application without running into timeout issues? Any best practices or optimizations for handling this?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mr_soul_002\"> /u/mr_soul_002 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lp1nps/how_to_properly_handle_table_creation_in_a_django/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django",
        "id": 3061421,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lp1nps/how_to_properly_handle_table_creation_in_a_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to Properly Handle Table Creation in a Django Multi-Tenant SaaS Application on AWS with Load Balancer Timeout?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/No-Anywhere6154",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.211074+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T12:11:32+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey guys, what are your usual go-to solutions when you&#39;re hosting your Django projects, and why?</p> <p>Is price the most important factor, or is it the feature set, credibility of the company, or how do you choose the right one?</p> <p>I&#39;m conducting a small research project to gain a deeper understanding of this topic. Thank you for your help</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/No-Anywhere6154\"> /u/No-Anywhere6154 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lp00rp/how_do_you_choose_your_django_hosting_provider/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lp00rp/how_do_you_choose_your_django_hosting_provider/\">[comments]</a></span>",
        "id": 3061417,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lp00rp/how_do_you_choose_your_django_hosting_provider",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How do you choose your Django hosting provider?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/ProfessionalStabber",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:58.934192+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T11:30:06+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have created a minimal django package <code> my_django_package/ \u251c\u2500\u2500 my_django_package/ (This is the actual Python package) \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 views.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 admin.py \u2514\u2500\u2500 setup.py </code></p> <p>now in my main django project, i should do <code>pip install path/to/my_django_package</code> and then include it in my installed_apps in settings</p> <p>but its always the module not found error</p> <p>doesn&#39;t work when i import in the python REPL</p> <p>i am using the same virtual environment, </p> <p>it works when i put the entire package inside the main django project</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ProfessionalStabber\"> /u/ProfessionalStabber </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1loz7zu/i_cannot_import_a_django_package/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1loz7zu/i_cannot_import_a_django_",
        "id": 3061422,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1loz7zu/i_cannot_import_a_django_package",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "I cannot import a django package",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/digreatbrian",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:59.102954+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T08:31:48+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>When using ASGI, using sync_to_async make it possible to creating non-blocking awaitable callables, but this introduces more overhead leading to slow speed even by milliseconds as this is very valuable in high performant apps. Is there any light fast function for doing the same thing without eating up speed and introducing more overhead?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/digreatbrian\"> /u/digreatbrian </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lowdyl/asgi_is_great_but_when_i_use_asgirefsyncsync_to/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lowdyl/asgi_is_great_but_when_i_use_asgirefsyncsync_to/\">[comments]</a></span>",
        "id": 3061423,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lowdyl/asgi_is_great_but_when_i_use_asgirefsyncsync_to",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "ASGI is great but when i use asgiref.sync.sync_to_async, everything becomes slow.",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/LordUzumaki",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T20:36:59.270382+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T06:20:36+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I am finishing up my first web application, a simple mood tracker where users log daily mood and notes. All pages require login so data stays private. I\u2019m worried visitors will see the login wall and leave without trying the core features. Is that a dealbreaker? What\u2019s the easiest way to let people try the main functionality without sacrificing privacy? I\u2019m using React with a Django REST backend and session based authentication.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/LordUzumaki\"> /u/LordUzumaki </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1louful/will_requiring_login_deter_users_from_trying_my/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1louful/will_requiring_login_deter_users_from_trying_my/\">[comments]</a></span>",
        "id": 3061424,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1louful/will_requiring_login_deter_users_from_trying_my",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Will requiring login deter users from trying my mood tracker?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Elieroos",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-07-01T01:12:52.380224+00:00",
        "date_dead_since": null,
        "date_published": "2025-07-01T00:20:51+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I realized many roles are only posted on internal career pages and never appear on classic job boards. So I built an AI script that scrapes listings from 70k+ corporate websites.</p> <p>Then I wrote an ML matching script that filters only the jobs most aligned with your CV, and yes, it actually works.</p> <p>You can try it <a href=\"https://laboro.co/?utm_source=reddit&amp;utm_medium=organic&amp;utm_campaign=9\">here</a> (for free). </p> <p>(If you\u2019re still skeptical but curious to test it, you can just upload a CV with fake personal information, those fields aren\u2019t used in the matching anyway.)</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Elieroos\"> /u/Elieroos </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1lons26/analyzing_100k_django_job_postings_trends_and/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1lons26/analyzing_100k_django_job_postings_trends_a",
        "id": 3057420,
        "language": null,
        "link": "https://www.reddit.com/r/django/comments/1lons26/analyzing_100k_django_job_postings_trends_and",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Analyzing 100k Django job postings: Trends and opportunities.",
        "vote": 0
    }
]