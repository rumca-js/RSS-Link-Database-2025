[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-06T19:54:21+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />Last time,&nbsp;<a href=\"https://devblogs.microsoft.com/oldnewthing/20250108-00/?p=110732\" title=\"Deeper inside STL: Waiting for a std::atomic&lt;std::shared_ptr&lt;T&gt;&gt; to change, part 1\">we looked at how the Microsoft C++ standard library implements&nbsp;<code>wait</code>&nbsp;and&nbsp;<code>notify_*</code>&nbsp;for&nbsp;<code>std::atomic&lt;std::shared_ptr&lt;T&gt;&gt;</code></a>. Today, we&rsquo;ll look at the other library that (as of this writing) implements&nbsp;<code>std::atomic&lt;std::shared_ptr&lt;T&gt;&gt;</code>: libstdc++.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20250109-00/?p=110738\">Inside STL: Waiting for a std::atomic&lt;std::shared_ptr&lt;T&gt;&gt; to change, part 2</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tThe fi",
        "id": 2263092,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/inside-stl-waiting-for-a-stdatomicstdshared-ptrt-to-change-part-2-raymond-c",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Inside STL: Waiting for a std::atomic to change, part 2 -- Raymond Chen",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-06T17:14:40+00:00",
        "description": "<p>\n\tThe ACCU conference has a range of workshops, including online options, this year:</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://accuconference.org/news/workshops-for-everyone\">Workshops for Everyone</a></h3>\n\t<p>\n\t\tby ACCU Conference</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tSee all the offerings, from Jason Turner, Nicolai Josuttis, Robert Seacord, Gail Ollis, Mateusz Pusz, Phil Nash and Mike Shah.</p>\n</blockquote>",
        "id": 2262515,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/workshops-for-everyone",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Workshops for Everyone -- ACCU Conference",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-06T17:13:54+00:00",
        "description": "<p>\n\tShould you start new projects in C++, these days? Is language safety an issue for you? What can be done, today?</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://undo.io/resources/making-cpp-safer/\">Making C++ Safer</a></h3>\n\t<p>\n\t\tby Greg Law</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tI believe that over time C++ will become a lot safer, maybe even some kind of &lsquo;safe&rsquo;. Competition is good: Clang was the best thing to happen to GCC, and Rust might turn out to be the best thing to happen to C++. That journey has already begun, with proposals for the evolution of the language including Contracts and Profiles, and simply changing some of the defaults in C++26. While the language custodians work to make the language itself safer, what can you do today?</p>\n</blockquote>\n<p>\n\t&nbsp;</p>",
        "id": 2262516,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/making-cpp-safer",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Making C++ Safer -- Greg Law",
        "vote": 0
    }
]