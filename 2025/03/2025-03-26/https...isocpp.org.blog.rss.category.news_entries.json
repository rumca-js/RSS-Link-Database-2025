[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-26T20:28:33+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />Memory diagnostic tools can be divided into runtime detection tools like Address Sanitizer (ASAN), Valgrind, and Application Verifier, and recording tools like rr and Time Travel Debugging (TTD). While runtime tools help catch memory errors as they occur, recording tools allow developers to trace memory modifications over time, making them a powerful combination for debugging complex issues.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20250124-00/?p=110805\">A Brief and Incomplete Comparison of Memory Corruption Detection Tools</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tI promised last time to do a comparison of memory diagnostic tools. We have runtime diagnostic tools&nbsp;<a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\" target=\"_b",
        "id": 2416280,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/a-brief-and-incomplete-comparison-of-memory-corruption-detection-tools-raym",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "A Brief and Incomplete Comparison of Memory Corruption Detection Tools -- Raymond Chen",
        "vote": 0
    }
]