[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-03T19:49:56+00:00",
        "description": "<p>\n\t<img alt=\"RaymondChen_5in-150x150.jpg\" src=\"https://isocpp.org/files/img/RaymondChen_5in-150x150.jpg\" style=\"width: 150px; margin: 10px; float: right;\" />When using std::atomic&lt;std::shared_ptr&lt;T&gt;&gt;, the C++ standard defines a \"change\" as a modification to either the stored pointer or the control block pointer. However, since atomic wait mechanisms typically track only a single memory address, the Microsoft implementation handles this limitation by using a timeout-based polling strategy to detect changes in the control block.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://devblogs.microsoft.com/oldnewthing/20250108-00/?p=110732\">Inside STL: Waiting for a std::atomic&lt;std::shared_ptr&lt;T&gt;&gt; to change, part 1</a></h3>\n\t<p>\n\t\tby Raymond Chen</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tLike other&nbsp;<code>std::atomic</code>&nbsp;specializations,&nbsp;<code>std::atomic&lt;<wbr />std::shared_ptr&lt;T&gt;&gt;</code>&nbsp;supports the&nbsp;<code>wait<",
        "id": 2238855,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/inside-stl-waiting-for-a-stdatomicstdshared-ptrt-to-change-part-1-raymond-c",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Inside STL: Waiting for a std::atomic to change, part 1 -- Raymond Chen",
        "vote": 0
    }
]