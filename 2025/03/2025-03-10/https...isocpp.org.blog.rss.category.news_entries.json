[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-03-10T19:56:30+00:00",
        "description": "<p>\n\t<img alt=\"codesafety2-filipek.png\" src=\"https://isocpp.org/files/img/codesafety2-filipek.png\" style=\"width: 230px; margin: 10px; float: right;\" />In this blog post, we&rsquo;ll explore ways to improve the safety of a simple configuration manager. We&rsquo;ll handle common pitfalls like dangling references and excessive stack usage. Additionally, we&rsquo;ll see how C++26 helps enforce safer coding practices with stricter diagnostics and improved handling of large objects.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.cppstories.com/2025/cpp26-safety-temp/\">Improving Code Safety in C++26: Managers and Dangling References</a></h3>\n\t<p>\n\t\tby Bartlomiej Filipek</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\t<strong>Step 1: The Buggy Implementation&nbsp;</strong><br />\n\t\t&nbsp;<br />\n\t\tBelow is a simple example of a manager object that stores various configs in a map and provides a method to retrieve them. When a requested configuration isn&rsquo;t found, the code a",
        "id": 2291020,
        "language": null,
        "link": "https://isocpp.org//blog/2025/03/improving-code-safety-in-cpp26-managers-and-dangling-references-bartlomiej",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Improving Code Safety in C++26: Managers and Dangling References -- Bartlomiej Filipek",
        "vote": 0
    }
]