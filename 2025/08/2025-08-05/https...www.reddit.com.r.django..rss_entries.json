[
    {
        "age": null,
        "album": "",
        "author": "/u/TGoddessana",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-05T16:33:02.419273+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-05T15:37:45+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello! I would like to introduce the django-logbox app. In the early stages of development or when operating a lightweight app, whenever an error occurred, I had to immediately connect to the container or VPS via SSH to check the logs.</p> <p>I created django-logbox to resolve this inconvenience, and have been using it in production. I just finished writing the documentation, and I am excited to share this project!</p> <ul> <li>When solutions like Sentry feel excessive</li> <li>When you want to identify errors from the admin page in a small-scale app</li> <li>When you want to check Python traceback errors during development</li> <li>When you want to see which devices users are accessing the site from via the admin page</li> <li>When you want to monitor daily traffic from the admin page</li> </ul> <p>Give my app a try! :)</p> <p>Github: <a href=\"https://github.com/TGoddessana/django-logbox\">https://github.com/TGoddessana/django-logbox</a><br/> Document",
        "id": 3258332,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1micjf5/hello_i_created_a_lightweight_django_logging_app",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Hello! I created a lightweight Django logging app.",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/anonymous_heart_mind",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-05T15:27:39.323357+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-05T14:25:06+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey everyone,</p> <p>I recently started working on an <strong>open-source Django UI component library</strong> called <a href=\"https://github.com/webdevavi96/Beautypy\"><strong>Beautypy</strong></a>.<br/> The goal is simple \u2014 to make it easier for Django developers to quickly add beautiful, reusable, and customizable UI components without spending hours on CSS and HTML.</p> <p>\ud83d\udccc <strong>What is Beautypy?</strong></p> <ul> <li>A growing collection of <strong>ready-to-use Django template components</strong></li> <li>Styled with modern design principles out of the box</li> <li>Includes reusable template tags like:djangoCopyEdit{% Button label=&quot;Submit&quot; type=&quot;submit&quot; %} {% Alert type=&quot;success&quot; message=&quot;Form submitted successfully!&quot; %} {% ContactForm %}</li> <li>Built for <strong>developer speed + clean UI</strong></li> </ul> <p>\ud83d\udce6 <strong>Installation &amp; Testing</strong><br/> You can try the library from TestPyPI he",
        "id": 3257582,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1miamxi/introducing_beautypy_an_opensource_django_ui",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "\ud83d\ude80 Introducing Beautypy \u2013 An Open-Source Django UI Component Library | Looking for Contributors & Feedback",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/kaedroho",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-05T10:02:44.917724+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-05T09:35:10+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey Everyone, I\u2019m excited to share Django ModelSearch, a library for indexing Django models in Elasticsearch or OpenSearch and querying them with the ORM</p> <p><a href=\"https://github.com/kaedroho/django-modelsearch\">GitHub</a> | <a href=\"https://django-modelsearch.readthedocs.io/en/latest/\">Documentation</a></p> <p>This allows you to reuse your existing Django ORM queries for search and works well with paginators, django-filter, DRF and more.</p> <p><strong>Quick example</strong></p> <p>Add <code>modelsearch.index.Indexed</code> to your model and define <code>search_fields</code>:</p> <p>```python from django.db import models from modelsearch import index</p> <p>class Book(index.Indexed, models.Model): title = models.TextField() author = models.ForeignKey(Author, ...) release_date = models.DateField()</p> <pre><code>search_fields = [ index.SearchField(&quot;title&quot;, boost=2.0), index.FilterField(&quot;release_date&quot;), index.RelatedFields(&qu",
        "id": 3255044,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1mi4my9/djangomodelsearch_index_django_models_with",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "django-modelsearch: Index Django Models with Elasticsearch or OpenSearch and query them with the ORM",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Marksh11",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-05T07:52:38.792469+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-05T07:12:08+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey everyone,</p> <p>I\u2019d like to share a project I\u2019ve been working on called <strong>Onix Enviro</strong> which I built with Django. Its cloud development platform that runs full dev environments entirely in the browser.</p> <p>I\u2019m 15 and spend a lot of time coding on different computers. One thing that kept slowing me down was setting up development environments. Whether it was installing tools, dealing with compatibility problems, or switching between devices, it always felt like unnecessary overhead. I wanted something that let me start working right away, without having to install or configure anything.</p> <p>So I built Onix Enviro. It gives you container-based workspaces that you access in the browser. You get a full Linux environment with a Visual Studio Code interface, the ability to install packages and tools, and support for Docker containers. The goal is to make development environments portable, fast to start, and consistent across any dev",
        "id": 3254391,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1mi2fj0/i_built_a_cloud_development_platform_with_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "I built a cloud development platform with Django",
        "vote": 0
    }
]