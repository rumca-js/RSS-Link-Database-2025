[
    {
        "age": null,
        "album": "",
        "author": "Blog Staff",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-21T15:31:57.917226+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-21T15:14:18+00:00",
        "description": "<p>\n\t<img alt=\"SANDOR_DARGO_ROUND.JPG\" src=\"https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG\" style=\"width: 200px; margin: 10px; float: right; height: 204px;\" />While <code data-end=\"66\" data-start=\"52\">dynamic_cast</code> is often discouraged for its impact on readability and reliance on RTTI, there are rare situations where it can be the most practical and safe solution. In this post, we explore one such real-world case: using <code data-end=\"291\" data-start=\"277\">dynamic_cast</code> for runtime versioning of plugin interfaces in a way that balances compatibility, safety, and extensibility.</p>\n<blockquote>\n\t<h3>\n\t\t<a href=\"https://www.sandordargo.com/blog/2025/06/25/once-more-about-dynamic-casts\">Once More About dynamic_cast, a Real Use Case</a></h3>\n\t<p>\n\t\tby Sandor Dargo</p>\n</blockquote>\n<p>\n\tFrom the article:</p>\n<blockquote>\n\t<p>\n\t\tI wrote a couple of times about&nbsp;<code>dynamic_cast</code>&nbsp;and I discouraged you from using it. In general,&nbsp;<a href=\"https://www.s",
        "id": 3384133,
        "language": "en",
        "link": "https://isocpp.org//blog/2025/08/once-more-about-dynamic-cast-a-real-use-case-sandor-dargo",
        "manual_status_code": 0,
        "page_rating": 29,
        "page_rating_contents": 90,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 314,
        "source_url": "https://isocpp.org/blog/rss/category/news",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://isocpp.org/files/img/SANDOR_DARGO_ROUND.JPG",
        "title": "Once More About dynamic_cast, a Real Use Case -- Sandor Dargo",
        "vote": 0
    }
]