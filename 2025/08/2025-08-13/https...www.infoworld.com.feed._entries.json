[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-13T12:07:17.383304+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-13T11:09:44+00:00",
        "description": "<div id=\"remove_no_follow\">\n\t\t<div class=\"grid grid--cols-10@md grid--cols-8@lg article-column\">\n\t\t\t\t\t  <div class=\"col-12 col-10@md col-6@lg col-start-3@lg\">\n\t\t\t\t\t\t<div class=\"article-column__content\">\n<section class=\"wp-block-bigbite-multi-title\"><div class=\"container\"></div></section>\n\n\n\n<p>Anthropic has expanded the capabilities of its Claude Sonnet 4 AI model to handle up to one million tokens of context, five times its previous limit, enabling developers to process entire codebases or large document collections in a single request.</p>\n\n\n\n<p>The upgrade, now in public beta via Anthropic\u2019s API and Amazon Bedrock, aims to support more complex use cases such as large-scale code analysis, large-scale document synthesis, and context-aware AI agents, with Google Cloud\u2019s Vertex AI integration expected soon.</p>\n\n\n\n<p>Anthropic\u2019s move comes as rivals OpenAI and Google market their own AI models with similar context limits, underscoring the race among major providers to handle larger and",
        "id": 3319289,
        "language": "en-US",
        "link": "https://www.infoworld.com/article/4038936/claude-sonnet-4-upgrade-enables-full-codebase-processing-in-a-single-request.html",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 468,
        "source_url": "https://www.infoworld.com/feed/",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Claude Sonnet 4 upgrade enables full codebase processing in a single request",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-13T09:58:00.666180+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-13T09:00:00+00:00",
        "description": "<div id=\"remove_no_follow\">\n<body><div class=\"grid grid--cols-10@md grid--cols-8@lg article-column\">\n\t\t\t\t\t  <div class=\"col-12 col-10@md col-6@lg col-start-3@lg\">\n\t\t\t\t\t\t<div class=\"article-column__content\">\n<section class=\"wp-block-bigbite-multi-title\"><div class=\"container\"></div></section>\n\n\n\n<p>Last week <a href=\"https://www.infoworld.com/article/4034555/how-to-measure-coupled-code.html\">I talked about connascence</a>, a measure of the coupling of code. We all agree that loosely coupled code is good, but what that means isn\u2019t always clear.\u00a0Connascence helps us reason about how code is coupled. You can\u2019t decouple your code if you don\u2019t understand how code couples together, right?</p>\n\n\n\n<p>Of course, modules of code have to be coupled in some way for anything to work. The phrase \u201cloosely coupled\u201d implies that we want code to be less coupled rather than more coupled.\u00a0But how do we measure that?\u00a0How do we think about the degree to which code is coupled?\u00a0Much of the specifics I\u2019ll look",
        "id": 3318462,
        "language": "en-US",
        "link": "https://www.infoworld.com/article/4038367/five-kinds-of-static-code-coupling.html",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 468,
        "source_url": "https://www.infoworld.com/feed/",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Five kinds of static code coupling",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-08-13T09:58:00.494518+00:00",
        "date_dead_since": null,
        "date_published": "2025-08-13T09:00:00+00:00",
        "description": "<div id=\"remove_no_follow\">\n<body><div class=\"grid grid--cols-10@md grid--cols-8@lg article-column\">\n\t\t\t\t\t  <div class=\"col-12 col-10@md col-6@lg col-start-3@lg\">\n\t\t\t\t\t\t<div class=\"article-column__content\">\n<section class=\"wp-block-bigbite-multi-title\"><div class=\"container\"></div></section>\n\n\n\n<p>Svelte introduced the idea of using a compiler to optimize and transform specialized syntax into front-end components. The idea has caught on with a variety of frameworks, including <a href=\"https://www.infoworld.com/article/3583477/is-the-react-compiler-ready-for-prime-time.html\">React</a>. In this style of reactive development, using a compiler lets the framework be more flexible and streamlined in its definitions. <a href=\"https://svelte.dev/\" data-type=\"link\" data-id=\"https://svelte.dev/\">Svelte</a>, the originator, uses the idea to full advantage. The resulting syntax is also incredibly smooth.</p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"what-developers-love-about-svelte\">What developers lo",
        "id": 3318461,
        "language": "en-US",
        "link": "https://www.infoworld.com/article/2265950/hands-on-with-svelte.html",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 468,
        "source_url": "https://www.infoworld.com/feed/",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://b2b-contenthub.com/wp-content/uploads/2025/08/svelte1.png?w=1024",
        "title": "Hands-on with Svelte: Build-time compilation in a reactive framework",
        "vote": 0
    }
]