[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-04-06T23:05:32+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://www.techpowerup.com/335026/chinas-rivai-technologies-introduces-lingyu-risc-v-server-processor\">https://www.techpowerup.com/335026/chinas-rivai-technologies-introduces-lingyu-risc-v-server-processor</a></p> <blockquote> <p>RiVAI Technologies, a Shenzhen-based semiconductor firm founded in 2018, unveiled this first fully domestic high-performance RISC-V server processor designed for compute-intensive applications. The Lingyu CPU features 32 general-purpose computing cores working alongside eight specialized intelligent computing cores (LPUs) in a heterogeneous &quot;one-core, dual architecture&quot; design. It aims for performance comparable to current x86 server processors, with the chip implementing optimized data pathways and enhanced pipelining mechanisms to maintain high clock frequencies under computational load. The architecture specifically targets maximum throughput for parallel processing workloads typical in data center env",
        "id": 2499143,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1jt71ss/chinas_rivai_technologies_introduces_lingyu_riscv",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "China's RiVAI Technologies Introduces \"Lingyu\" RISC-V Server Processor",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-04-06T19:04:20+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi, I am trying to port freeRTOS for a cpu core I am running on an FPGA. The problem I am facing is that I don&#39;t currently have any .elf loader but I am copying the objdump to RAM directly. But with freeRTOS it does not get padded correctly. Should I continue trying to create a binary file that can immediately be loaded into RAM or should I spend time porting an elf loader instead? </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/RoboAbathur\"> /u/RoboAbathur </a> <br/> <span><a href=\"https://www.reddit.com/r/RISCV/comments/1jt1q4e/loading_freertos_directly_to_ram_without_an_elf/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/RISCV/comments/1jt1q4e/loading_freertos_directly_to_ram_without_an_elf/\">[comments]</a></span>",
        "id": 2498106,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1jt1q4e/loading_freertos_directly_to_ram_without_an_elf",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Loading freeRTOS directly to RAM without an elf parser",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-04-06T14:10:59+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Thinking about grabbing a Milk-V Vega, but I&#39;ve got some doubts and figured I&#39;d check here before pulling the trigger.</p> <p>I&#39;m looking for a compact switch (10-inch rack width, not full 19&quot;) that can sit between my ISP&#39;s router and the rest of my homelab gear. The wishlist:</p> <ul> <li>2 or 4x 10G ports<br/></li> <li>8x 1G ports<br/></li> <li>Fits in a 10&quot; rack (so no full-size enterprise bricks)</li> </ul> <p>The Vega kinda ticks the boxes on paper, but I\u2019m worried about a few things: - Software feels outdated, I&#39;ve seen multiple complaints about it in <a href=\"https://www.reddit.com/r/RISCV/comments/15vbmvt/milkv_launches_milkv_vega_the_worlds_first_riscv/\">the OG thread</a>, - Doesn\u2019t look like it gets much upstream love,<br/> - Community/support is\u2026 sparse?</p> <p>I don\u2019t mind tinkering a bit, but I\u2019d rather not end up with a cool-looking paperweight. Is anyone here actually using one? Is it stable? Usable? Hacka",
        "id": 2496808,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1jsuzr2/milkv_vega_switch_looking_for_something_to_sit",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Milk-V Vega switch? Looking for something to sit between ISP router + homelab gear.",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-04-06T06:09:16+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I completed my first RV32I 5 stage pipelined design and tested it on FPGA. Its been a fun learning journey and i want to go forward hopefully make money or advance in the field.</p> <p>What should i do now? Should i improve RV32I design? Go for 64 bit? Or implement other extensions? Try to learn ASIC? </p> <p>Thank you!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Odd_Garbage_2857\"> /u/Odd_Garbage_2857 </a> <br/> <span><a href=\"https://www.reddit.com/r/RISCV/comments/1jsnj7k/rv32i_core_done_now_what_to_do/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/RISCV/comments/1jsnj7k/rv32i_core_done_now_what_to_do/\">[comments]</a></span>",
        "id": 2494790,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1jsnj7k/rv32i_core_done_now_what_to_do",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "RV32I core done now what to do?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_dead_since": null,
        "date_published": "2025-04-06T05:54:12+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>One of the most widely-quoted &quot;authoritative&quot; criticisms of the design of RISC-V is from GNU MP maintainer Torbj\u00f6rn Granlund:</p> <p><a href=\"https://gmplib.org/list-archives/gmp-devel/2021-September/006013.html\">https://gmplib.org/list-archives/gmp-devel/2021-September/006013.html</a></p> <blockquote> <p>My conclusion is that Risc V is a terrible architecture. It has a uniquely weak instruction set. Any task will require more Risc V instructions that any contemporary instruction set. Sure, it is &quot;clean&quot; but just to make it clean, there was no reason to be naive.</p> <p>I believe that an average computer science student could come up with a better instruction set that Risc V in a single term project.</p> </blockquote> <p>His main criticism, as an author of GMP, is the lack of a carry flag, saying that as a result RISC-V CPUs will be 2-3 times slower than a similar CPU that has a carry flag and add-with-carry instruction.</p> <p>At",
        "id": 2494789,
        "language": null,
        "link": "https://www.reddit.com/r/RISCV/comments/1jsnbdr/gnu_mp_bignum_library_test_riscv_vs_arm",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "GNU MP bignum library test RISC-V vs Arm",
        "vote": 0
    }
]