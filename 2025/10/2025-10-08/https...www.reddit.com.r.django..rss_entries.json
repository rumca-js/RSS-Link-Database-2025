[
    {
        "age": null,
        "album": "",
        "author": "/u/ColdPorridge",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-08T14:29:26.000247+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-08T13:27:00+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi all, I\u2019m looking for some thoughts on patterns for separate auth services. I have a standalone frontend using better auth. My Django ninja app authenticates using JWTs and verifies the tokens using the standard HttpBearer auth pattern. </p> <p>Now the issue I\u2019m running into is that my source of truth for user info (email, password etc) is in a separate database behind the auth service. So we need to find some way to reconcile users in auth db and Django\u2019s user model in the backend.</p> <p>If we keep separate DBs, I can create users on sign up (via a separate api call) or manage just-in-time user creation if a user id in the jwt claim is not known. I\u2019d be more inclined to the former since adding reconciliation logic to each request seems overkill. </p> <p>However, some basic functionality like Django\u2019s session/authorization middleware don\u2019t seem to work well with this, and it registers all users as anonymous when assigning e.g. request.user (useful ",
        "id": 3764473,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o1ah9m/separate_auth_service_best_practices",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Separate Auth Service - Best Practices?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/rararatototo",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-08T14:29:25.795957+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-08T12:42:48+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey guys, I&#39;m currently developing a new feature that requires creating new tables in the database (I&#39;m using Django, but the question applies to any stack).</p> <p>My question is about branch and database management. Let&#39;s say I create a new branch just for this feature, where new tables are added via migrations. So far so good.</p> <p>But what happens if the feature doesn&#39;t work and I want to roll back to the main branch? In the main branch these tables do not exist, and the database has already been migrated with the new tables.</p> <p>How do you usually deal with this?</p> <p>Do you create a separate database for each feature branch?</p> <p>Or do you roll back the migrations manually (migrate &lt;app&gt; &lt;migration_number&gt;) before returning to main?</p> <p>Are there any good practices to avoid inconsistencies between branches and database?</p> <p>It cost! I&#39;m trying to make the development flow cleaner and safer so I don&",
        "id": 3764472,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o19eq5/question_how_to_deal_with_new_tables_when_testing",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "[Question] How to deal with new tables when testing a feature in a separate branch?",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Odd_Watercress5294",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-08T11:03:30.516819+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-08T10:38:03+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Went from almost zero to ~5k visitors in a week after finally shipping something I\u2019d been tinkering with for months. Stack is looking like this now:</p> <ul> <li>Claude Code + VS Code \u2192 core dev flow, fast iteration</li> <li>Netlify \u2192 hosting + serverless functions</li> <li>Supabase \u2192 auth + db for layered memory</li> <li>Replicate \u2192 image gen API plugged straight into the chats</li> <li>Imgbb \u2192 image storage</li> </ul> <p>The fun part wasn\u2019t just the traffic spike but seeing the multilayered memory system actually work in production (short-term context + long-term persona memory + custom user edits). Feels a lot more \u201calive\u201d when you chat with it.</p> <p>Not perfect, but shipping early helped me catch what actually matters: users love the memory + visual generation combo way more than all the small tweaks I obsessed over.</p> <p>Still iterating, but kind of wild to see how fast a weekend project can scale if you stitch the right tools together.</p> <",
        "id": 3762996,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o16x3j/when_you_mix_claude_code_vs_code_netlify_and",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "When you mix Claude Code, VS Code, Netlify and Supabase together",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Jaded_Ant456",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-08T07:39:42.084294+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-08T06:31:35+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I am actually building a Saas where you construct your entire workflow (n8n style) and that will be directly turned into a Django app ready for production. I am in an advanced step in the project, if someone is interested to work on this project just let me know!</p> <p>I am also thinking about turning it into a community project.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Jaded_Ant456\"> /u/Jaded_Ant456 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1o132ok/building_a_workflow_to_direct_django_code_saas/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1o132ok/building_a_workflow_to_direct_django_code_saas/\">[comments]</a></span>",
        "id": 3762023,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o132ok/building_a_workflow_to_direct_django_code_saas",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Building a workflow to direct django code SaaS",
        "vote": 0
    }
]