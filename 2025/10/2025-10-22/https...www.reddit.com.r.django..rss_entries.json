[
    {
        "age": null,
        "album": "",
        "author": "/u/person-loading",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T22:14:37.882935+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T21:22:18+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Introducing Django-Bolt v0.2.0 (Beta) \ud83c\udf89</p> <p>Build blazing-fast APIs in Django with Rust-powered performance:</p> <p>Performance Benchmarks:</p> <p>\u26a1 2x more RPS compared to FastAPI for ORM queries (10 items). (Django ORM vs SqlAlchemy)</p> <p>\u26a1 70k+ RPS for 10KB JSON responses (using msgspec) vs. FastAPI&#39;s 12k RPS (using Pydantic)</p> <p>Both tested with 8 workers. See <a href=\"https://github.com/FarhanAliRaza/django-bolt\">https://github.com/FarhanAliRaza/django-bolt</a> for more details.</p> <p>Installation:</p> <p><code>pip install django-bolt</code></p> <p>Expect bugs and api changes.</p> <p>Code `@api.get(&quot;/mini10&quot;) async def list_mini_10() -&gt; List[UserMini]: return User.objects.only(&quot;id&quot;, &quot;username&quot;)[:10]</p> <p>`</p> <p>UserMini is a msgspec struct. The queryset is automatically serializes to JSON.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/person-loading\"> /u/pe",
        "id": 3879153,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odkyfk/djangobolt_rust_powered_api_framework_faster_than",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django-bolt Rust powered API framework. Faster than FastApi with all the features of Django",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/NaiveRelationship135",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T20:47:39.325576+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T20:33:19+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey everyone,</p> <p>I recently finished and deployed a decently complex Django project and thought it might be cool to share a bit about the stack, setup, and experience and open it up for any questions, feedback, or advice.</p> <p>I&#39;ve been using Django for a long while now, and honestly, I still love working with it. This project was a fun mix of Django REST, Celery, Channels, Docker, and a few other moving parts.</p> <p><strong>The Project</strong></p> <p>It\u2019s a dynamic platform for hosting multiple guesser/trivia games, where players can play daily challenges or go head-to-head with friends in multiplayer mode in real time.</p> <p>What I\u2019m most proud about this of is how easy it is to add new game modes and topics without needing to write a ton of extra code. Everything is built to be modular and scalable while still keeping things simple.</p> <p><strong>Backend Stack</strong></p> <ul> <li><strong>Web APIs:</strong> <a href=\"https://www.djang",
        "id": 3878496,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odjozz/built_and_deployed_a_decently_complex_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Built and Deployed a Decently Complex Django Project",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/dwaxe",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T19:28:30.786870+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T19:02:15+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dwaxe\"> /u/dwaxe </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/oct/22/django-60-beta-released/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1odh9qa/django_60_beta_1_released/\">[comments]</a></span>",
        "id": 3877712,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odh9qa/django_60_beta_1_released",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django 6.0 beta 1 released",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Minute-Ad4083",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T17:53:26.206569+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T17:35:03+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi , how can i use django for microservice ? , i have an app built using django and there is user model and some other models , and i have another app built using django and there is some other models , i want both app to use the first apps user model . </p> <p>and i want to use the same postgres database for both the apps , how can i do this? because if i use one database and two backends , there will be migration issues right? if i make any change in the first app i have to create migration files and then then migrate but the second app wont have these migration files and there will be many issues , can anyone tell me how can i find a solution for this?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Minute-Ad4083\"> /u/Minute-Ad4083 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1odew4r/django_for_microservice/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/",
        "id": 3876813,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odew4r/django_for_microservice",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Django for microservice",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/paltman94",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T12:43:13.916405+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T11:58:05+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/paltman94\"> /u/paltman94 </a> <br/> <span><a href=\"https://wedgworth.dev/reusing-graphql-queries-within-django/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1od6896/reusing_graphql_queries_within_django/\">[comments]</a></span>",
        "id": 3874372,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1od6896/reusing_graphql_queries_within_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Reusing GraphQL Queries within Django",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/ErikBonde5413",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-22T08:59:06.638590+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-22T08:54:01+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi,</p> <p>I&#39;m new to Django (but with pretty extensive expereience developing in Python and other languages).</p> <p>One thing that feels uncomfortable for me in Django is the migration thing. If you make a mistake in your model, or want to change the models, you have these migrations there accumulating and they feel like an open door to trouble.</p> <p>This makes me always weary of changing the models and when drafting them I have this sense of dread that I am making a mess that will be difficult to clean up :-)</p> <p>How do you deal with this? What workflow do you recomend?</p> <p>-- Erik</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/ErikBonde5413\"> /u/ErikBonde5413 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1od31ew/migration_anxiety/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1od31ew/migration_anxiety/\">[comments]</a></span>",
        "id": 3872884,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1od31ew/migration_anxiety",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Migration anxiety",
        "vote": 0
    }
]