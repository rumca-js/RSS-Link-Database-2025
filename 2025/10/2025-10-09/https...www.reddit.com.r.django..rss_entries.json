[
    {
        "age": null,
        "album": "",
        "author": "/u/mrdonbrown",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-09T23:14:34.686800+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-09T22:56:51+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/mrdonbrown\"> /u/mrdonbrown </a> <br/> <span><a href=\"https://mrdonbrown.blogspot.com/2025/10/using-async-functions-in-celery-with.html\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1o2kkqg/how_to_use_async_functions_in_celery_with_django/\">[comments]</a></span>",
        "id": 3778823,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o2kkqg/how_to_use_async_functions_in_celery_with_django",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How to use async functions in Celery with Django and connection pooling",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Ready_Wind8697",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-09T21:52:21.923740+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-09T20:50:28+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hi guys can anyone help me in admin panel I can&#39;t find my tables </p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Ready_Wind8697\"> /u/Ready_Wind8697 </a> <br/> <span><a href=\"https://www.reddit.com/gallery/1o2hi68\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1o2hi68/i_have_a_problem/\">[comments]</a></span>",
        "id": 3778204,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o2hi68/i_have_a_problem",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "I have a problem",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/virtualshivam",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-09T16:11:35.443764+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-09T14:10:52+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>So, I work for a startup and this is totally based on learning from experience. </p> <p>When I had started I never understood the true purpose of git, docker, branching, env, logging and testing.</p> <p>But now after shipping few softwares, I started to understand how they help. </p> <p>Somehow all of the code works perfectly in the local environment, we don&#39;t have a dedicated tester. And I feel due to negligence people just say that it&#39;s working without rigorously testing it. In production when actual users work on it, then we find so many bugs which shouldn&#39;t be even there. </p> <p>Like eg:- update is not working, even after 200 response out of 5, 3 fields got updated rest two are returning the same data. On a page update is working on another it&#39;s not. And many such minute things. </p> <p>Now in case of &gt;500 errors, litterally there is no way to know the things. When in local we try it works. </p> <p>For example: </p> <ol> <li>Vi",
        "id": 3775156,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o26yzj/handling_deployments_and_testing_effectively",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Handling Deployments and Testing Effectively",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Siemendaemon",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-09T05:06:44.832646+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-09T03:52:01+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>what&#39;s the best approach? do i need to use the subclass to group fields that are closely related. </p> <pre><code>class MyModel(models.Model): class A: field = models.Char......... class B: ... class N: ... </code></pre> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Siemendaemon\"> /u/Siemendaemon </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1o1w2q6/how_do_you_structure_really_large_django_model/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1o1w2q6/how_do_you_structure_really_large_django_model/\">[comments]</a></span>",
        "id": 3770883,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o1w2q6/how_do_you_structure_really_large_django_model",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "How do you structure really large Django model with nearly 100 fields.",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/monoGovt",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-09T03:28:29.276639+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-09T02:43:22+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I wanted to ask about security practices when containerizing Django applications (or just in general).</p> <p>I know remote code execution (RCE) isn&#39;t something that happens often, but I could not help but think about how Django&#39;s admin commands (also as Python being an interpreted language where the container ships with the runtime) make the exploitation easier and more severe.</p> <p>I wanted to throw out some ideas (a couple common and some others) to see what others thought:</p> <ol> <li>(General, Common) Running containers with non-root user. Add into Dockerfile <code>USER uvicorn</code>. Prevents privileged actions.</li> <li>(General) Setting file permissions on source code to read-only (need to ensure running user cannot update permissions). Dockerfile <code>RUN chmod -R 444 src_folder</code>. Prevents changes to source code.</li> <li>(Interpreted languages) Source code obfuscation? User needs to read source code to run it, but it does ",
        "id": 3770553,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1o1usc5/security_practices_with_containerization",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Security Practices with Containerization",
        "vote": 0
    }
]