[
    {
        "age": null,
        "album": "",
        "author": null,
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-12T21:05:53.226436+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-12T00:00:00+00:00",
        "description": "<p>In <a href=\"https://www.cppstories.com/2022/tuple-iteration-basics/\">part 1</a> of this mini-series, we looked at the basics of iterating over a <code>std::tuple</code> using <code>index_sequence</code> and fold expressions.\nIn <a href=\"https://www.cppstories.com/2022/tuple-iteration-apply/\">part 2</a>, we simplified things with <code>std::apply</code> and even created helpers like <code>for_each_tuple</code> and <code>transform_tuple</code>.</p>\n<p>So far, we used C++ features up to C++20/23&hellip; but now, in C++26, we finally get language-level tools that make tuple iteration straightforward and expressive. In this article, we\u2019ll explore two new techniques:</p>\n<ul>\n<li>Structured bindings can introduce a pack  - <a href=\"https://wg21.link/P1061R10\">P1061</a>  -  turn a tuple into a pack of variables.</li>\n<li>Expansion statements <a href=\"https://wg21.link/p1306\">P1306</a> -  the ultimate \u201ccompile-time loop\u201d syntax.</li>\n</ul>\n<h2 id=\"structured-binding-packs\">\nStructured bind",
        "id": 3797741,
        "language": "en-us",
        "link": "https://www.cppstories.com/2025/tuple-iteration-cpp26",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 47,
        "source_url": "https://www.cppstories.com/index.xml",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "C++ Templates: How to Iterate through std::tuple: C++26 Packs and Expansion Statements",
        "vote": 0
    }
]