[
    {
        "age": null,
        "album": "",
        "author": "/u/_ptitSeb_",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-13T16:34:09.203693+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-13T15:14:25+00:00",
        "description": "<table> <tr><td> <a href=\"https://www.reddit.com/r/RISCV/comments/1o5mh1w/box64_v038_released/\"> <img src=\"https://external-preview.redd.it/2azFquA7VDpPrwF4y6N0UsJjwYuAA2lhZW-RZP4R_lk.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=a179ea7cd525df9dc2edabc79eb5c3f321be9372\" alt=\"Box64 v0.3.8 Released\" title=\"Box64 v0.3.8 Released\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/_ptitSeb_\"> /u/_ptitSeb_ </a> <br/> <span><a href=\"https://box86.org/2025/10/new-box64-v0-3-8-released/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/RISCV/comments/1o5mh1w/box64_v038_released/\">[comments]</a></span> </td></tr></table>",
        "id": 3802688,
        "language": "en",
        "link": "https://www.reddit.com/r/RISCV/comments/1o5mh1w/box64_v038_released",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://external-preview.redd.it/2azFquA7VDpPrwF4y6N0UsJjwYuAA2lhZW-RZP4R_lk.png?width=640&crop=smart&auto=webp&s=a179ea7cd525df9dc2edabc79eb5c3f321be9372",
        "title": "Box64 v0.3.8 Released",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/GroundHelpful7138",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-13T14:57:06.980308+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-13T14:40:40+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hello, friends from the community, here we are again.</p> <p>While the immature ecosystem of the RISC-V architecture is an established fact and the bottleneck that has been hindering the development of HPC scenarios, we do find another way: </p> <p>Cold storage is a different beast: huge datasets, infrequent access, strong security, reliable indexing, and scalable management matter more than peak CPU throughput. This opens a practical pathway for RISC-V servers to contribute, even with ecosystem gaps.</p> <p>What\u2019s new:</p> <p>At the China\u2013ASEAN Expo in Nanning, Guangxi, China. SOPHGO showcased what\u2019s described as the industry\u2019s first EB-scale intelligent cloud storage platform built on its SG2044 server.</p> <p>How it\u2019s put together:</p> <p>\u00d8 Hardware base: SOPHGO provides a self-developed 64-core RISC-V high-density server, forming the compute layer for the storage platform.</p> <p>\u00d8 Storage architecture: Guilin University of Electronic Technology (",
        "id": 3800735,
        "language": "en",
        "link": "https://www.reddit.com/r/RISCV/comments/1o5lk2l/sophgo_technology_newsletter_20251013_sophgo",
        "manual_status_code": 0,
        "page_rating": 85,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "SOPHGO TECHNOLOGY NEWSLETTER (20251013) \u2014\u2014SOPHGO SG2044 server for cold storage",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/tansufun",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-13T08:36:16.006344+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-13T07:27:21+00:00",
        "description": "<table> <tr><td> <a href=\"https://www.reddit.com/r/RISCV/comments/1o5d6pd/first_riscv_core_attemp/\"> <img src=\"https://preview.redd.it/tq7cl5euztuf1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e02a6e3a244ca6438b022debddd46303d2591548\" alt=\"First RiscV Core attemp\" title=\"First RiscV Core attemp\" /> </a> </td><td> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/tansufun\"> /u/tansufun </a> <br/> <span><a href=\"https://i.redd.it/tq7cl5euztuf1.png\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/RISCV/comments/1o5d6pd/first_riscv_core_attemp/\">[comments]</a></span> </td></tr></table>",
        "id": 3799725,
        "language": "en",
        "link": "https://www.reddit.com/r/RISCV/comments/1o5d6pd/first_riscv_core_attemp",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 86,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": "https://preview.redd.it/tq7cl5euztuf1.png?width=640&crop=smart&auto=webp&s=e02a6e3a244ca6438b022debddd46303d2591548",
        "title": "First RiscV Core attemp",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/I00I-SqAR",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-13T07:12:46.624118+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-13T00:42:32+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>From the description: &quot;How can users add new instructions without knowledge on GCC internals? </p> <p>Integrating custom instructions into a RISC-V processor typically requires deep familiarity with GCC internals, particularly its RTL and backend architecture. This talk presents APEX, an approach for defining custom RISC-V instructions in GCC directly from C using pragmas, or assembly source code. Rather than modifying the compiler internals directly, users can define new operations using a simple &quot;<a href=\"https://www.youtube.com/hashtag/pragma\">#pragma</a>&quot; and a function declaration, which are then parsed by the front end and transformed into GCC\u2019s internal RTL (RTX) representation. This approach eliminates the need for manual backend modifications, making custom instruction support more accessible to users. </p> <p>We will explore the APEX pipeline in detail - from parsing APEX input C-code to instruction emission and encoding in Bi",
        "id": 3799150,
        "language": "en",
        "link": "https://www.reddit.com/r/RISCV/comments/1o55njb/gnu_tools_cauldron_simplifying_custom_instruction",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 471,
        "source_url": "https://www.reddit.com/r/RISCV/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "GNU Tools Cauldron: Simplifying Custom Instruction Integration in GCC for RISC-V processors",
        "vote": 0
    }
]