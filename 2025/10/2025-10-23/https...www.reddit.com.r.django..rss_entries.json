[
    {
        "age": null,
        "album": "",
        "author": "/u/Experto_AI",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T18:21:15.360749+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T17:51:56+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Just shipped QuickScale v0.60.0, and I&#39;m excited about the <strong>deployment automation</strong> we built. </p> <p>What&#39;s New</p> <p><strong>One command</strong> handles the entire deployment workflow:</p> <pre><code>quickscale deploy railway </code></pre> <p>This automatically:</p> <ul> <li><strong>Provisions PostgreSQL database</strong> - No manual Railway dashboard clicking</li> <li><strong>Generates SECRET_KEY</strong> - Uses Django&#39;s secure random generation</li> <li><strong>Configures environment</strong> - Interactive prompts for ALLOWED_HOSTS, DEBUG, etc.</li> <li><strong>Runs migrations</strong> - Executes <a href=\"http://manage.py\"><code>manage.py</code></a> <code>migrate</code> on Railway</li> <li><strong>Collects static files</strong> - Handles <code>collectstatic</code> for production</li> <li><strong>Sets up HTTPS</strong> - Railway auto-provisions SSL certificates</li> </ul> <p>The entire process takes <strong>under 5 minut",
        "id": 3886807,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1oea4p0/quickscale_v0600_deploy_django_to_railway_in_5",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "QuickScale v0.60.0 - Deploy Django to Railway in 5 minutes with one command",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Flaky-Substance-6748",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T15:49:52.777804+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T14:57:05+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Hey folks,</p> <p>I am subscribed only to ChatGPT Plus and GitHub Copilot, using mainly VS Code Copilot, Codex CLI, and the free Gemini CLI for this project.</p> <p>I built an open-source <strong>full-stack trading boilerplate</strong> that utilizes the <a href=\"https://docs.alpaca.markets/reference/stockbars\">Alpaca API</a> for both historical and real-time market data. </p> <p>The goal is to provide developers with a plug-and-play base for building custom trading dashboards, strategy engines, and backtesting tools without requiring expensive market data feeds.</p> <p>\ud83d\udd17 <strong>GitHub</strong>: <a href=\"https://github.com/naveedkhan1998/alpaca-main\">https://github.com/naveedkhan1998/alpaca-main</a><br/> \ud83c\udf10 <strong>Live Demo</strong> (free-tier hosting \u2192 a bit slow): <a href=\"https://alpaca.mnaveedk.com/\">https://alpaca.mnaveedk.com/</a></p> <p><strong>Tech Stack:</strong></p> <ul> <li><strong>Backend:</strong> Django + DRF, Celery workers for backgrou",
        "id": 3885405,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1oe5i4n/fullstack_project_realtime_trading_boilerplate",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "[Full-Stack Project] Real-Time Trading Boilerplate \u2013 Django, Celery, React + Alpaca API",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/gbeier",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T14:34:40.279214+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T13:35:39+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/gbeier\"> /u/gbeier </a> <br/> <span><a href=\"https://www.youtube.com/watch?v=99qZ-y8Nhx0\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1oe3fyd/customizing_djangoallauth_custom_signup_forms_and/\">[comments]</a></span>",
        "id": 3884643,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1oe3fyd/customizing_djangoallauth_custom_signup_forms_and",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Customizing django-allauth - custom signup forms and logic",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Funny-Ad-5060",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T10:47:12.190850+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T10:00:16+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Exciting news!</p> <p>Python 3.14 has officially removed the Global Interpreter Lock (GIL), marking a huge step forward for parallel computing and performance efficiency in Python.</p> <p>You can read more about it here <a href=\"https://pythonjournals.com/python-3-14-is-here-the-most-exciting-update-yet/\">https://pythonjournals.com/python-3-14-is-here-the-most-exciting-update-yet/</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Funny-Ad-5060\"> /u/Funny-Ad-5060 </a> <br/> <span><a href=\"https://pythonjournals.com/python-3-14-is-here-the-most-exciting-update-yet/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1odz8cg/python_314_just_remove_gil/\">[comments]</a></span>",
        "id": 3882759,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odz8cg/python_314_just_remove_gil",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Python 3.14 just remove GIL",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/SD_youdumbass",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T09:33:40.125027+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T08:22:39+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I know the magic of reddit can save this npc(me).</p> <p>I&#39;m looking for a complex industry level django project. An application to the likes of HRMS application, it can be CRM, EMS or anything etc.</p> <p>I just want a good youtube video which goes from scratch to build such an application.</p> <p>Can you give me some ?</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/SD_youdumbass\"> /u/SD_youdumbass </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1odxq9h/where_is_a_good_complex_django_project_in_youtube/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1odxq9h/where_is_a_good_complex_django_project_in_youtube/\">[comments]</a></span>",
        "id": 3882323,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odxq9h/where_is_a_good_complex_django_project_in_youtube",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Where is a good complex django project in youtube",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/dwaxe",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T08:18:33.458921+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T07:41:43+00:00",
        "description": "&#32; submitted by &#32; <a href=\"https://www.reddit.com/user/dwaxe\"> /u/dwaxe </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/oct/23/pycharm-django-annual-fundraiser/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1odx3zr/pycharm_django_annual_fundraiser/\">[comments]</a></span>",
        "id": 3881917,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odx3zr/pycharm_django_annual_fundraiser",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "PyCharm & Django annual fundraiser",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/thibaudcolas",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T08:18:33.547166+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T07:30:31+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p><a href=\"https://jb.gg/z2vvb7\">Their offer</a> (30% off, 100% of the money donated to the DSF) is available until November 11th!</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/thibaudcolas\"> /u/thibaudcolas </a> <br/> <span><a href=\"https://www.djangoproject.com/weblog/2025/oct/23/pycharm-django-annual-fundraiser/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1odwy06/pycharm_django_annual_fundraiser/\">[comments]</a></span>",
        "id": 3881918,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odwy06/pycharm_django_annual_fundraiser",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "PyCharm & Django annual fundraiser",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/mun_e",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T07:00:21.648052+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T06:42:49+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>So I&#39;m kinda new to web Dev, and I just realized the way I write my services is not really popular or at least I think.<br/> It has been brought to my attention that I would rather keep my methods &#39;state-less&#39; rather than &#39;state-full&#39;.<br/> Is there really a right way of doing things. My philosophy was based on providing a single interface to the service and upon instantiating I could just let it take care of everything by calling certain methods after instantiating.<br/> Please advice.</p> <pre><code>class ApartmentCreateService: def __init__( self, *, block: str, unit_number: int, rent: Decimal | int | None = None, available: bool | None = None, ): self.block = block self.unit_number = unit_number self.rent = rent or None self.avaialble = available or None def _set_rent(self): if self.rent is not None: self.apartment.rent = Decimal(self.rent) return self.apartment.rent = some_value def _set_availability(self): if self.avaialble i",
        "id": 3881579,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odw7p0/confused_about_design_principles_on_oop",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Confused about design principles on OOP.",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Minimum-Jaguar-6635",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T05:44:41.357214+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T05:18:26+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>Contact for website building in reasonable price.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href=\"https://www.reddit.com/user/Minimum-Jaguar-6635\"> /u/Minimum-Jaguar-6635 </a> <br/> <span><a href=\"https://www.reddit.com/r/django/comments/1oduuo6/web_development/\">[link]</a></span> &#32; <span><a href=\"https://www.reddit.com/r/django/comments/1oduuo6/web_development/\">[comments]</a></span>",
        "id": 3881215,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1oduuo6/web_development",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Web development",
        "vote": 0
    },
    {
        "age": null,
        "album": "",
        "author": "/u/Kronologics",
        "bookmarked": false,
        "comments": [],
        "date_created": "2025-10-23T04:29:28.101272+00:00",
        "date_dead_since": null,
        "date_published": "2025-10-23T03:24:56+00:00",
        "description": "<!-- SC_OFF --><div class=\"md\"><p>I have enjoyed working with Django in the past and I&#39;ve heard the axiom before: &quot;the best tool to use is the one you&#39;re familiar with&quot;, so my first thought to start this backend service is Django + DRF.</p> <p>My upcoming project is going to be very I/O focused, handling a lot of files and storing them in S3 buckets and keeping database records related to said files. I have in the past enjoyed using Django for the ORM (I enjoy it more than SQLAlchemy, specially migrations) and the super easy BOTO/Storages integration. However I wonder if my project being so file focused if it would benefit from asynchronous features. I have not run into these considerations before since previous projects have been more straightforward static sites with Django.</p> <p>I&#39;ve seen mention of Django Ninja as focusing on adding a good asynchronous layer to Django, but not sure if people consider that stable enough for production apps. Or if I should go",
        "id": 3880931,
        "language": "",
        "link": "https://www.reddit.com/r/django/comments/1odsu0b/is_django_the_right_tool_for_my_new_project",
        "manual_status_code": 0,
        "page_rating": 27,
        "page_rating_contents": 85,
        "page_rating_visits": 0,
        "page_rating_votes": 0,
        "permanent": false,
        "source__id": 491,
        "source_url": "https://www.reddit.com/r/django/.rss",
        "status_code": 0,
        "tags": [],
        "thumbnail": null,
        "title": "Is Django the right tool for my new project?",
        "vote": 0
    }
]